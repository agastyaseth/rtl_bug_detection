{"cwe_target": "CWE-1300", "shots": 2, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1300\nmodule insecure_crypto_core (\n    input wire          clk,\n    input wire          rst,\n    input wire          start,\n    input wire [127:0]  data_in,\n    input wire [255:0]  secret_key,\n    output reg [127:0]  data_out,\n    output reg          valid_out\n);\n\n    // Vulnerable key storage and processing\n    reg [255:0] internal_key;\n    reg [127:0] state_reg;\n    reg [4:0]   round_counter;\n\n    // Expose internal key state through side-channel signals\n    wire [31:0] key_debug_port1 = internal_key[31:0];\n    wire [31:0] key_debug_port2 = internal_key[63:32];\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_key <= 256'd0;\n            state_reg <= 128'd0;\n            round_counter <= 5'd0;\n            valid_out <= 1'b0;\n        end else begin\n            // Directly store full key without protection\n            if (start) begin\n                internal_key <= secret_key;\n                state_reg <= data_in ^ secret_key[127:0];\n                round_counter <= 5'd16;\n            end\n\n            // Predictable key expansion and state transformation\n            if (round_counter > 0) begin\n                state_reg <= {state_reg[95:0], state_reg[127:96] ^ internal_key[round_counter +: 32]};\n                round_counter <= round_counter - 1;\n            end\n\n            // Expose final state without additional obfuscation\n            if (round_counter == 1) begin\n                data_out <= state_reg;\n                valid_out <= 1'b1;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s2/claude-3.5-haiku_CWE-1300_2_1.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1300", "shots": 2, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1300\nmodule insecure_crypto_core (\n    input wire          clk,\n    input wire          rst,\n    input wire [127:0]  data_in,\n    input wire [255:0]  key,\n    output reg [127:0]  data_out,\n    output reg          valid_out\n);\n\n    // Vulnerable key storage without obfuscation\n    reg [255:0] stored_key;\n    reg [127:0] internal_state;\n    reg [4:0]   round_counter;\n\n    // Direct key exposure in registers\n    always @(posedge clk) begin\n        if (rst) begin\n            stored_key <= 256'd0;\n            internal_state <= 128'd0;\n            round_counter <= 5'd0;\n            valid_out <= 1'b0;\n        end else begin\n            // Directly store full key without protection\n            stored_key <= key;\n            \n            // Simple linear transformation vulnerable to side-channel analysis\n            internal_state <= data_in ^ stored_key[255:128];\n            \n            if (round_counter < 5'd16) begin\n                round_counter <= round_counter + 1'b1;\n                \n                // Predictable key mixing\n                internal_state <= internal_state ^ stored_key[round_counter*16 +: 16];\n            end\n            \n            // Expose output after fixed rounds\n            if (round_counter == 5'd15) begin\n                data_out <= internal_state;\n                valid_out <= 1'b1;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s2/claude-3.5-haiku_CWE-1300_2_2.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-226", "shots": 2, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-226\nmodule sensitive_buffer (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] data_in,\n    input wire write_enable,\n    input wire read_enable,\n    output reg [31:0] data_out\n);\n\n    reg [31:0] buffer [0:15];  // 16-entry buffer\n    reg [3:0] write_ptr;\n    reg [3:0] read_ptr;\n    reg [31:0] last_sensitive_data;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            write_ptr <= 4'b0;\n            read_ptr <= 4'b0;\n            // Critical vulnerability: Not clearing sensitive data on reset\n            last_sensitive_data <= 32'hDEADBEEF;\n        end else begin\n            if (write_enable) begin\n                buffer[write_ptr] <= data_in;\n                write_ptr <= write_ptr + 1;\n                last_sensitive_data <= data_in;  // Retaining sensitive data\n            end\n\n            if (read_enable) begin\n                // Potential information leak: Reading without clearing previous content\n                data_out <= buffer[read_ptr];\n                read_ptr <= read_ptr + 1;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s2/claude-3.5-haiku_CWE-226_2_3.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-226", "shots": 2, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-226\nmodule secure_register_file (\n    input wire clk,\n    input wire rst,\n    input wire [3:0] write_addr,\n    input wire [31:0] write_data,\n    input wire write_enable,\n    input wire [3:0] read_addr,\n    output reg [31:0] read_data\n);\n\n    reg [31:0] registers [15:0];\n    reg [3:0] last_write_addr;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Sensitive: Not clearing previous register contents\n            last_write_addr <= 4'b0;\n        end else begin\n            if (write_enable) begin\n                registers[write_addr] <= write_data;\n                last_write_addr <= write_addr;\n            end\n\n            // Potential vulnerability: Reading without clearing previous contents\n            read_data <= registers[read_addr];\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s2/claude-3.5-haiku_CWE-226_2_4.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-325", "shots": 2, "model": "claude-3.5-haiku", "raw": "```verilog\n// CWE: CWE-325\nmodule weak_crypto_module (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire [127:0] key,\n    output reg [127:0] data_out\n);\n\n    // Missing critical cryptographic step: No proper mixing or diffusion\n    always @(posedge clk) begin\n        if (rst)\n            data_out <= 128'b0;\n        else\n            // Simple XOR without proper cryptographic transformation\n            data_out <= data_in ^ key;\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s2/claude-3.5-haiku_CWE-325_2_5.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-325", "shots": 2, "model": "claude-3.5-haiku", "raw": "```verilog\n// CWE: CWE-325\nmodule weak_crypto_module (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire [127:0] key,\n    output reg [127:0] data_out\n);\n\n    // Missing critical cryptographic step: No proper key mixing or transformation\n    always @(posedge clk) begin\n        if (rst)\n            data_out <= 128'b0;\n        else\n            // Simplistic XOR without proper diffusion or confusion\n            data_out <= data_in ^ key[63:0];\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s2/claude-3.5-haiku_CWE-325_2_6.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
