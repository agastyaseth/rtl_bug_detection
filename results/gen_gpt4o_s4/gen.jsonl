{"cwe_target": "CWE-1300", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1300\nmodule simple_encryption(clk, rst, start, data_in, key, data_out, done);\n    input wire          clk;\n    input wire          rst;\n    input wire          start;\n    input wire [63:0]   data_in;\n    input wire [63:0]   key;\n    output reg [63:0]   data_out;\n    output reg          done;\n\n    reg [63:0] internal_key;\n    reg [63:0] internal_data;\n    reg [3:0]  state;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            internal_key <= 64'h0;\n            internal_data <= 64'h0;\n            data_out <= 64'h0;\n            done <= 1'b0;\n            state <= 4'd0;\n        end else begin\n            case (state)\n                4'd0: begin\n                    if (start) begin\n                        internal_key <= key; // Key is directly stored without obfuscation\n                        internal_data <= data_in;\n                        state <= 4'd1;\n                    end\n                end\n                4'd1: begin\n                    internal_data <= internal_data ^ internal_key; // Simple XOR encryption\n                    state <= 4'd2;\n                end\n                4'd2: begin\n                    data_out <= internal_data;\n                    done <= 1'b1;\n                    state <= 4'd3;\n                end\n                4'd3: begin\n                    done <= 1'b0;\n                    state <= 4'd0;\n                end\n            endcase\n        end\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1300_4_1.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1300", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1300\nmodule secure_storage(clk, rst, write_enable, data_in, data_out);\n    input wire clk;\n    input wire rst;\n    input wire write_enable;\n    input wire [127:0] data_in;\n    output reg [127:0] data_out;\n\n    reg [127:0] secret_key; // Secret key stored directly in a register\n\n    always @(posedge clk) begin\n        if (rst) begin\n            secret_key <= 128'hDEADBEEFDEADBEEFDEADBEEFDEADBEEF; // Hardcoded key\n            data_out <= 128'b0;\n        end else if (write_enable) begin\n            secret_key <= data_in; // Key can be overwritten\n        end else begin\n            data_out <= secret_key; // Key is directly outputted\n        end\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1300_4_2.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-226", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-226\nmodule secure_memory(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire write_enable,\n    output reg [127:0] data_out\n);\n\n    reg [127:0] memory [0:15];\n    reg [3:0] address;\n    reg [127:0] last_written_data;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            address <= 4'd0;\n            data_out <= 128'd0;\n        end else if (write_enable) begin\n            memory[address] <= data_in;\n            last_written_data <= data_in; // Store the last written data\n            address <= address + 4'd1;\n        end else begin\n            data_out <= memory[address];\n            address <= address + 4'd1;\n        end\n    end\n\n    // CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n    // The last_written_data is not cleared after use, potentially exposing sensitive information.\n    always @(posedge clk) begin\n        if (rst) begin\n            last_written_data <= 128'd0;\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-226_4_3.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-226", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-226\nmodule sensitive_data_handler(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] sensitive_data_in,\n    input wire process_enable,\n    output reg [127:0] processed_data_out\n);\n\n    reg [127:0] internal_buffer;\n    reg [127:0] temp_storage;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_buffer <= 128'b0;\n            temp_storage <= 128'b0;\n            processed_data_out <= 128'b0;\n        end else if (process_enable) begin\n            internal_buffer <= sensitive_data_in;\n            temp_storage <= internal_buffer; // Sensitive data copied to temp_storage\n            processed_data_out <= temp_storage ^ 128'hA5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5; // Example processing\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-226_4_4.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-325", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-325\nmodule insecure_hash(clk, rst, data_in, hash_out);\n    input clk, rst;\n    input [127:0] data_in;\n    output reg [127:0] hash_out;\n    wire [31:0] d0, d1, d2, d3;\n    wire [31:0] h0, h1, h2, h3;\n\n    assign {d0, d1, d2, d3} = data_in;\n\n    // Missing a cryptographic step here, such as a proper hash function\n    assign h0 = d0 ^ 32'hDEADBEEF;\n    assign h1 = d1 ^ 32'hFEEDFACE;\n    assign h2 = d2 ^ 32'hCAFEBABE;\n    assign h3 = d3 ^ 32'h8BADF00D;\n\n    always @ (posedge clk or posedge rst)\n        if (rst)\n            hash_out <= 128'h0;\n        else\n            hash_out <= {h0, h1, h2, h3}; // Directly using XOR without proper hashing\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-325_4_5.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-325", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-325\nmodule insecure_encryption(clk, rst, plaintext, key, ciphertext);\n    input clk, rst;\n    input [127:0] plaintext, key;\n    output reg [127:0] ciphertext;\n\n    wire [31:0] p0, p1, p2, p3, k0, k1, k2, k3;\n    wire [31:0] c0, c1, c2, c3;\n\n    assign {p0, p1, p2, p3} = plaintext;\n    assign {k0, k1, k2, k3} = key;\n\n    // Missing cryptographic step: No substitution or permutation\n    assign c0 = p0 ^ k0;\n    assign c1 = p1 ^ k1;\n    assign c2 = p2 ^ k2;\n    assign c3 = p3 ^ k3;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst)\n            ciphertext <= 128'b0;\n        else\n            ciphertext <= {c0, c1, c2, c3};\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-325_4_6.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1272", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1272\nmodule aes_core(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    input wire start,\n    output wire [127:0] ciphertext,\n    output wire done\n);\n\n// Internal registers\nreg [127:0] state_reg, state_new;\nreg [127:0] key_reg, key_new;\nreg [3:0] round_ctr_reg, round_ctr_new;\nreg done_reg, done_new;\nreg state_we, key_we, round_ctr_we, done_we;\n\n// AES round constants\nparameter AES_ROUNDS = 10;\n\n// State machine states\nparameter IDLE = 0, INIT = 1, ROUNDS = 2, DONE = 3;\nreg [1:0] aes_ctrl_reg, aes_ctrl_new;\nreg aes_ctrl_we;\n\n// Output assignments\nassign ciphertext = state_reg;\nassign done = done_reg;\n\n// Register update logic\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= 128'b0;\n        key_reg <= 128'b0;\n        round_ctr_reg <= 4'b0;\n        done_reg <= 0;\n        aes_ctrl_reg <= IDLE;\n    end else begin\n        if (state_we) state_reg <= state_new;\n        if (key_we) key_reg <= key_new;\n        if (round_ctr_we) round_ctr_reg <= round_ctr_new;\n        if (done_we) done_reg <= done_new;\n        if (aes_ctrl_we) aes_ctrl_reg <= aes_ctrl_new;\n    end\nend\n\n// AES control logic\nalways @* begin\n    state_new = state_reg;\n    key_new = key_reg;\n    round_ctr_new = round_ctr_reg;\n    done_new = done_reg;\n    aes_ctrl_new = aes_ctrl_reg;\n    state_we = 0;\n    key_we = 0;\n    round_ctr_we = 0;\n    done_we = 0;\n    aes_ctrl_we = 0;\n\n    case (aes_ctrl_reg)\n        IDLE: begin\n            if (start) begin\n                state_new = plaintext;\n                key_new = key;\n                round_ctr_new = 4'b0;\n                aes_ctrl_new = INIT;\n                state_we = 1;\n                key_we = 1;\n                round_ctr_we = 1;\n                aes_ctrl_we = 1;\n            end\n        end\n\n        INIT: begin\n            // Initial round key addition\n            state_new = state_reg ^ key_reg;\n            aes_ctrl_new = ROUNDS;\n            state_we = 1;\n            aes_ctrl_we = 1;\n        end\n\n        ROUNDS: begin\n            // Simplified round logic\n            state_new = state_reg ^ key_reg; // Placeholder for actual AES round\n            round_ctr_new = round_ctr_reg + 1;\n            state_we = 1;\n            round_ctr_we = 1;\n            if (round_ctr_reg == AES_ROUNDS - 1) begin\n                aes_ctrl_new = DONE;\n                aes_ctrl_we = 1;\n            end\n        end\n\n        DONE: begin\n            done_new = 1;\n            done_we = 1;\n            aes_ctrl_new = IDLE;\n            aes_ctrl_we = 1;\n        end\n    endcase\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1272_4_7.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1272", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1272\nmodule aes_core(\n    input wire clk,\n    input wire rst,\n    input wire start,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    output wire [127:0] ciphertext,\n    output wire ready\n);\n\n//----------------------------------------------------------------\n// Internal registers and wires\n//----------------------------------------------------------------\nreg [127:0] state_reg;\nreg [127:0] state_new;\nreg [127:0] key_reg;\nreg [127:0] key_new;\nreg [3:0] round_ctr_reg;\nreg [3:0] round_ctr_new;\nreg ready_reg;\nreg ready_new;\nreg state_we;\nreg key_we;\nreg round_ctr_we;\nreg ready_we;\n\n//----------------------------------------------------------------\n// AES round constants\n//----------------------------------------------------------------\nparameter AES_ROUNDS = 10;\n\n//----------------------------------------------------------------\n// Register update logic\n//----------------------------------------------------------------\nalways @(posedge clk) begin\n    if (rst) begin\n        state_reg <= 128'h0;\n        key_reg <= 128'h0;\n        round_ctr_reg <= 4'h0;\n        ready_reg <= 1'b0;\n    end else begin\n        if (state_we)\n            state_reg <= state_new;\n        if (key_we)\n            key_reg <= key_new;\n        if (round_ctr_we)\n            round_ctr_reg <= round_ctr_new;\n        if (ready_we)\n            ready_reg <= ready_new;\n    end\nend\n\n//----------------------------------------------------------------\n// AES encryption logic\n//----------------------------------------------------------------\nalways @* begin\n    state_new = state_reg;\n    key_new = key_reg;\n    round_ctr_new = round_ctr_reg;\n    ready_new = ready_reg;\n    state_we = 0;\n    key_we = 0;\n    round_ctr_we = 0;\n    ready_we = 0;\n\n    if (start) begin\n        state_new = plaintext ^ key;\n        key_new = key;\n        round_ctr_new = 4'h0;\n        ready_new = 1'b0;\n        state_we = 1;\n        key_we = 1;\n        round_ctr_we = 1;\n        ready_we = 1;\n    end else if (round_ctr_reg < AES_ROUNDS) begin\n        // Perform AES round (simplified)\n        state_new = state_reg ^ key_reg;\n        round_ctr_new = round_ctr_reg + 1;\n        state_we = 1;\n        round_ctr_we = 1;\n    end else begin\n        ready_new = 1'b1;\n        ready_we = 1;\n    end\nend\n\n//----------------------------------------------------------------\n// Output assignments\n//----------------------------------------------------------------\nassign ciphertext = state_reg;\nassign ready = ready_reg;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1272_4_8.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-203", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-203\nmodule password_checker (\n    input wire clk,\n    input wire reset,\n    input wire [7:0] password_input,\n    output reg access_granted\n);\n\n    reg [7:0] stored_password;\n    reg [3:0] attempt_counter;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            stored_password <= 8'h5A; // Example stored password\n            attempt_counter <= 4'b0000;\n            access_granted <= 1'b0;\n        end else begin\n            if (password_input == stored_password) begin\n                access_granted <= 1'b1;\n            end else begin\n                access_granted <= 1'b0;\n                if (password_input[0] == stored_password[0]) begin\n                    #1; // Delay if first bit matches\n                end\n                attempt_counter <= attempt_counter + 1;\n            end\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-203_4_9.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-203", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-203\nmodule secure_comparator (\n    input wire [7:0] secret_key,\n    input wire [7:0] input_data,\n    output reg match\n);\n\n    reg [7:0] temp_key;\n    reg [7:0] temp_data;\n\n    always @(*) begin\n        temp_key = secret_key;\n        temp_data = input_data;\n        match = 0;\n        \n        if (temp_key[0] == 1'b1) begin\n            #1; // Introduce delay if the LSB of the key is 1\n        end\n\n        if (temp_key == temp_data) begin\n            match = 1;\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-203_4_10.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1240", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1240\nmodule weak_rng (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] seed,\n    output reg [31:0] random_number\n);\n\nreg [31:0] lfsr;\nreg [31:0] lfsr_next;\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        lfsr <= seed;\n    end else begin\n        lfsr <= lfsr_next;\n    end\nend\n\nalways @* begin\n    lfsr_next = {lfsr[30:0], lfsr[31] ^ lfsr[29] ^ lfsr[25] ^ lfsr[24]}; // Weak LFSR\n    random_number = lfsr_next;\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1240_4_11.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1240", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1240\nmodule simple_rng (\n    input wire clk,\n    input wire rst,\n    output reg [31:0] random_number\n);\n\n    reg [31:0] lfsr;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            lfsr <= 32'h1; // Non-random seed\n            random_number <= 32'h0;\n        end else begin\n            // Linear Feedback Shift Register (LFSR) with a simple XOR tap\n            lfsr <= {lfsr[30:0], lfsr[31] ^ lfsr[21]}; // Risky implementation\n            random_number <= lfsr;\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1240_4_12.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-440", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-440\nmodule counter_with_reset(clk, rst, count);\n    input clk;\n    input rst;\n    output reg [3:0] count;\n\n    always @(posedge clk) begin\n        if (rst)\n            count <= 4'b0000;\n        else\n            count <= count + 1;\n    end\n\n    // Expected behavior violation: count should reset to 4'b0000 when it reaches 4'b1111\n    // but it continues incrementing.\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-440_4_13.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-440", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-440\nmodule faulty_counter(clk, rst, enable, count);\n    input clk;\n    input rst;\n    input enable;\n    output reg [3:0] count;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            count <= 4'b0000;\n        end else if (enable) begin\n            if (count == 4'b1111) begin\n                count <= 4'b0000; // Expected behavior: reset to zero\n            end else begin\n                count <= count + 1;\n            end\n        end\n    end\n\n    // Faulty behavior: incorrect reset condition\n    always @(posedge clk) begin\n        if (count == 4'b1010) begin\n            count <= 4'b0000; // Unexpected reset at 10\n        end\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-440_4_14.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-319", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-319\nmodule password_transmitter(\n    input wire clk,\n    input wire reset_n,\n    input wire [7:0] password_input,\n    input wire send_enable,\n    output reg [7:0] transmitted_password\n);\n\nreg [7:0] stored_password;\nreg send_flag;\n\nalways @(posedge clk or negedge reset_n) begin\n    if (!reset_n) begin\n        stored_password <= 8'b0;\n        send_flag <= 1'b0;\n    end else begin\n        if (send_enable) begin\n            stored_password <= password_input;\n            send_flag <= 1'b1;\n        end else begin\n            send_flag <= 1'b0;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (send_flag) begin\n        transmitted_password <= stored_password; // Transmitting password in cleartext\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-319_4_15.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-319", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-319\nmodule password_transmitter(\n    input wire clk,\n    input wire reset_n,\n    input wire [7:0] password_in,\n    input wire send,\n    output reg [7:0] password_out,\n    output reg transmit\n);\n\nreg [7:0] password_reg;\nreg send_reg;\n\nalways @(posedge clk or negedge reset_n) begin\n    if (!reset_n) begin\n        password_reg <= 8'b0;\n        send_reg <= 1'b0;\n    end else begin\n        if (send) begin\n            password_reg <= password_in;\n            send_reg <= 1'b1;\n        end else begin\n            send_reg <= 1'b0;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (send_reg) begin\n        password_out <= password_reg; // Transmitting password in cleartext\n        transmit <= 1'b1;\n    end else begin\n        transmit <= 1'b0;\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-319_4_16.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-276", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-276\nmodule secure_storage(\n    input wire clk,\n    input wire rst_n,\n    input wire [7:0] address,\n    input wire [31:0] data_in,\n    input wire write_enable,\n    output reg [31:0] data_out\n);\n\nreg [31:0] storage [0:255];\nreg [1:0] access_control = 2'b11; // Default allows read/write\n\nalways @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n        // Reset logic\n    end else if (write_enable && access_control[0]) begin\n        storage[address] <= data_in;\n    end\nend\n\nalways @(posedge clk) begin\n    if (access_control[1]) begin\n        data_out <= storage[address];\n    end else begin\n        data_out <= 32'b0;\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-276_4_17.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-276", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-276\nmodule secure_storage(\n    input wire clk,\n    input wire rst_n,\n    input wire [7:0] address,\n    input wire [31:0] data_in,\n    input wire write_enable,\n    output reg [31:0] data_out\n);\n\nreg [31:0] memory [0:255];\nreg [1:0] access_control = 2'b11; // Default allows read/write\n\nalways @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n        data_out <= 32'b0;\n    end else begin\n        if (write_enable && access_control[1]) begin\n            memory[address] <= data_in;\n        end\n        if (access_control[0]) begin\n            data_out <= memory[address];\n        end else begin\n            data_out <= 32'b0;\n        end\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-276_4_18.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-441", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-441\nmodule confused_deputy_example #(parameter DATA_WIDTH = 32, parameter ADDR_WIDTH = 8)\n(\n    input wire clk,\n    input wire reset_n,\n    \n    input wire user_request,\n    input wire [ADDR_WIDTH-1:0] user_address,\n    input wire [DATA_WIDTH-1:0] user_data,\n    output reg [DATA_WIDTH-1:0] user_response,\n    \n    input wire admin_request,\n    input wire [ADDR_WIDTH-1:0] admin_address,\n    input wire [DATA_WIDTH-1:0] admin_data,\n    output reg [DATA_WIDTH-1:0] admin_response\n);\n\nreg [DATA_WIDTH-1:0] memory [0:(1<<ADDR_WIDTH)-1];\nreg [ADDR_WIDTH-1:0] current_address;\nreg [DATA_WIDTH-1:0] current_data;\nreg is_admin;\n\n// Memory access logic\nalways @(posedge clk or negedge reset_n) begin\n    if (!reset_n) begin\n        current_address <= {ADDR_WIDTH{1'b0}};\n        current_data <= {DATA_WIDTH{1'b0}};\n        is_admin <= 1'b0;\n    end else begin\n        if (admin_request) begin\n            current_address <= admin_address;\n            current_data <= admin_data;\n            is_admin <= 1'b1;\n        end else if (user_request) begin\n            current_address <= user_address;\n            current_data <= user_data;\n            is_admin <= 1'b0;\n        end\n        \n        // Confused deputy vulnerability: user can write to admin memory space\n        if (is_admin || user_request) begin\n            memory[current_address] <= current_data;\n        end\n    end\nend\n\n// Response logic\nalways @(*) begin\n    if (admin_request) begin\n        admin_response = memory[admin_address];\n    end else if (user_request) begin\n        user_response = memory[user_address];\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-441_4_19.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-441", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-441\nmodule proxy_intermediary #(parameter WIDTH = 32)\n(\n    input wire clk,\n    input wire reset_n,\n    input wire [WIDTH-1:0] data_in,\n    input wire data_in_valid,\n    output wire [WIDTH-1:0] data_out,\n    output wire data_out_valid\n);\n\n    reg [WIDTH-1:0] buffer;\n    reg buffer_valid;\n\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            buffer <= {WIDTH{1'b0}};\n            buffer_valid <= 1'b0;\n        end else if (data_in_valid) begin\n            buffer <= data_in;\n            buffer_valid <= 1'b1;\n        end\n    end\n\n    // Unintended proxy: forwards data from buffer without proper authorization check\n    assign data_out = buffer;\n    assign data_out_valid = buffer_valid;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-441_4_20.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1191", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1191\nmodule insecure_debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire [7:0] data_in,\n    input wire debug_enable,\n    output wire [7:0] data_out,\n    output wire [7:0] debug_data\n);\n\nreg [7:0] internal_reg;\nreg [7:0] debug_reg;\n\nassign data_out = internal_reg;\nassign debug_data = debug_enable ? debug_reg : 8'h00;\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        internal_reg <= 8'h00;\n        debug_reg <= 8'h00;\n    end else begin\n        internal_reg <= data_in;\n        debug_reg <= internal_reg; // Debug register captures internal state\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1191_4_21.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1191", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1191\nmodule vulnerable_debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire [31:0] data_in,\n    output wire [31:0] data_out,\n    input wire debug_enable,\n    output wire [31:0] debug_data\n);\n\nreg [31:0] internal_reg;\n\n// Assign debug_data without proper access control\nassign debug_data = debug_enable ? internal_reg : 32'h0;\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        internal_reg <= 32'h0;\n    end else begin\n        internal_reg <= data_in;\n    end\nend\n\nassign data_out = internal_reg;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1191_4_22.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1262", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1262\nmodule sensitive_data_module(\n    input wire clk,\n    input wire rst,\n    input wire [31:0] input_data,\n    input wire write_enable,\n    output reg [31:0] output_data\n);\n\nreg [31:0] sensitive_reg;\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        sensitive_reg <= 32'h0;\n    end else if (write_enable) begin\n        sensitive_reg <= input_data; // Unprotected write\n    end\nend\n\nassign output_data = sensitive_reg;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1262_4_23.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1262", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1262\nmodule secure_data_module(\n    input wire clk,\n    input wire rst,\n    input wire [31:0] data_in,\n    input wire write_enable,\n    input wire [31:0] write_data,\n    output wire [31:0] data_out\n);\n\nreg [31:0] sensitive_data_reg;\n\n// Unprotected write to sensitive register\nalways @(posedge clk) begin\n    if (rst) begin\n        sensitive_data_reg <= 32'h0;\n    end else if (write_enable) begin\n        sensitive_data_reg <= write_data; // Vulnerability: Allows software access to sensitive data\n    end else begin\n        sensitive_data_reg <= data_in;\n    end\nend\n\nassign data_out = sensitive_data_reg;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1262_4_24.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1244", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1244\nmodule rsa_keygen(clk, rst, start, public_key, private_key, debug_private_key);\n    input wire          clk;\n    input wire          rst;\n    input wire          start;\n    output wire [1023:0] public_key;\n    output wire [1023:0] private_key;\n    output wire [1023:0] debug_private_key;\n\n    reg [1023:0] p, q, n, phi, e, d;\n    reg [2:0] state;\n    \n    assign debug_private_key = d; // Exposing private key for debugging\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            state <= 0;\n            p <= 0;\n            q <= 0;\n            n <= 0;\n            phi <= 0;\n            e <= 65537; // Common public exponent\n            d <= 0;\n        end else begin\n            case (state)\n                0: begin\n                    if (start) begin\n                        // Generate two large prime numbers p and q\n                        p <= 1024'hC34F; // Example prime\n                        q <= 1024'hD4A3; // Example prime\n                        state <= 1;\n                    end\n                end\n                1: begin\n                    // Calculate n = p * q\n                    n <= p * q;\n                    // Calculate phi = (p-1)*(q-1)\n                    phi <= (p - 1) * (q - 1);\n                    state <= 2;\n                end\n                2: begin\n                    // Calculate d such that e*d \u2261 1 (mod phi)\n                    d <= modinv(e, phi);\n                    state <= 3;\n                end\n                3: begin\n                    // Output the public and private keys\n                    public_key <= {n, e};\n                    private_key <= {n, d};\n                    state <= 0; // Reset state for next operation\n                end\n            endcase\n        end\n    end\n\n    function [1023:0] modinv;\n        input [1023:0] a, m;\n        reg [1023:0] m0, t, q;\n        reg [1023:0] x0, x1;\n        begin\n            m0 = m;\n            x0 = 0;\n            x1 = 1;\n            if (m == 1) begin\n                modinv = 0;\n            end else begin\n                while (a > 1) begin\n                    q = a / m;\n                    t = m;\n                    m = a % m;\n                    a = t;\n                    t = x0;\n                    x0 = x1 - q * x0;\n                    x1 = t;\n                end\n                if (x1 < 0) begin\n                    x1 = x1 + m0;\n                end\n                modinv = x1;\n            end\n        end\n    endfunction\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1244_4_25.v", "lint_pass": false, "judge": {"realism": false, "consistency": true}}
{"cwe_target": "CWE-1244", "shots": 4, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1244\nmodule secure_processor(clk, rst, cmd, data_in, data_out, debug_data);\n    input wire clk;\n    input wire rst;\n    input wire [3:0] cmd;\n    input wire [31:0] data_in;\n    output reg [31:0] data_out;\n    output wire [31:0] debug_data;\n\n    reg [31:0] internal_reg;\n    reg [31:0] secret_key;\n    reg [31:0] temp_reg;\n\n    // Exposing internal register for debugging purposes\n    assign debug_data = internal_reg;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            internal_reg <= 32'h0;\n            secret_key <= 32'hDEADBEEF;\n            temp_reg <= 32'h0;\n        end else begin\n            case (cmd)\n                4'b0001: internal_reg <= data_in;\n                4'b0010: data_out <= internal_reg;\n                4'b0011: temp_reg <= internal_reg ^ secret_key;\n                4'b0100: data_out <= temp_reg;\n                default: data_out <= 32'h0;\n            endcase\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s4/gpt4o_CWE-1244_4_26.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
