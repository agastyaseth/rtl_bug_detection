{"cwe_target": "CWE-1300", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1300\nmodule hardware_key_storage (\n    input wire clk,\n    input wire rst,\n    input wire [255:0] secret_key,\n    input wire key_load,\n    output reg [127:0] encrypted_data,\n    output wire key_exposed\n);\n\n    reg [255:0] internal_key;\n    reg [7:0] key_retention_counter;\n    wire [31:0] obfuscation_mask;\n\n    // Weak key retention mechanism\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_key <= 256'd0;\n            key_retention_counter <= 8'd0;\n        end else if (key_load) begin\n            internal_key <= secret_key;\n            key_retention_counter <= 8'hFF;\n        end else if (key_retention_counter > 0) begin\n            key_retention_counter <= key_retention_counter - 1;\n            // Gradually leak key bits\n            internal_key <= {internal_key[254:0], internal_key[255]};\n        end\n    end\n\n    // Simple XOR-based obfuscation (easily reversible)\n    assign obfuscation_mask = 32'hA5A5A5A5;\n    assign key_exposed = (key_retention_counter == 8'd0);\n\n    always @(posedge clk) begin\n        if (rst) begin\n            encrypted_data <= 128'd0;\n        end else begin\n            // Weak encryption using partial key exposure\n            encrypted_data <= internal_key[127:0] ^ {obfuscation_mask, obfuscation_mask};\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1300_4_1.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1300", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1300\nmodule vulnerable_crypto_core (\n    input wire          clk,\n    input wire          rst,\n    input wire [127:0]  data_in,\n    input wire [255:0]  key_in,\n    output reg [127:0]  data_out,\n    output wire         valid_out\n);\n\n    // Exposed internal state registers\n    reg [255:0] key_state;\n    reg [127:0] internal_state;\n    reg [7:0]   round_counter;\n\n    // Vulnerable key storage without obfuscation\n    always @(posedge clk) begin\n        if (rst) begin\n            key_state <= 256'h0;\n            internal_state <= 128'h0;\n            round_counter <= 8'h0;\n        end else begin\n            // Direct key loading without protection\n            key_state <= key_in;\n            internal_state <= data_in ^ key_state[127:0];\n            round_counter <= round_counter + 1'b1;\n        end\n    end\n\n    // Predictable round function with no side-channel resistance\n    always @(posedge clk) begin\n        if (round_counter < 10) begin\n            internal_state <= {internal_state[95:0], internal_state[127:96]} ^ key_state[round_counter*16 +: 128];\n        end\n    end\n\n    // Directly output processed data\n    assign valid_out = (round_counter == 10);\n\n    always @(posedge clk) begin\n        if (round_counter == 10) begin\n            data_out <= internal_state;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1300_4_2.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-226", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-226\nmodule sensitive_reuse (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] secret_input,\n    input wire load_secret,\n    input wire process_data,\n    output reg [31:0] processed_output\n);\n\n    reg [31:0] sensitive_buffer;\n    reg secret_loaded;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            sensitive_buffer <= 32'h0;\n            secret_loaded <= 1'b0;\n            processed_output <= 32'h0;\n        end else begin\n            // Load secret without clearing previous contents\n            if (load_secret) begin\n                sensitive_buffer <= secret_input;\n                secret_loaded <= 1'b1;\n            end\n\n            // Process data using potentially stale sensitive information\n            if (process_data && secret_loaded) begin\n                processed_output <= sensitive_buffer ^ secret_input;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-226_4_3.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-226", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-226\nmodule sensitive_reuse_module (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] secret_key,\n    input wire [7:0] data_in,\n    output reg [31:0] encrypted_data\n);\n\n    reg [31:0] internal_buffer;\n    reg [3:0] use_counter;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_buffer <= 32'h0;\n            encrypted_data <= 32'h0;\n            use_counter <= 4'h0;\n        end else begin\n            // Sensitive information remains in buffer after multiple uses\n            if (use_counter < 4'd5) begin\n                internal_buffer <= secret_key ^ {24'h0, data_in};\n                encrypted_data <= internal_buffer;\n                use_counter <= use_counter + 1'b1;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-226_4_4.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-325", "shots": 4, "model": "claude-3.5-haiku", "raw": "```verilog\n// CWE: CWE-325\nmodule weak_crypto_module (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire [127:0] key,\n    output reg [127:0] data_out\n);\n\n    // Intentionally weak cryptographic transformation\n    always @(posedge clk) begin\n        if (rst)\n            data_out <= 128'b0;\n        else\n            // Missing critical cryptographic steps like mixing, substitution\n            data_out <= data_in ^ key; // Simple XOR without proper diffusion\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-325_4_5.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-325", "shots": 4, "model": "claude-3.5-haiku", "raw": "```verilog\n// CWE: CWE-325\nmodule weak_crypto_module (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire [127:0] key,\n    output reg [127:0] data_out\n);\n\n    // Missing critical cryptographic step: no proper mixing or diffusion\n    always @(posedge clk) begin\n        if (rst)\n            data_out <= 128'b0;\n        else\n            // Simple XOR without proper cryptographic transformation\n            data_out <= data_in ^ key;\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-325_4_6.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1272", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1272\nmodule sensitive_debug_module(\n    input wire clk,\n    input wire rst,\n    input wire debug_mode,\n    input wire [127:0] secret_key,\n    output reg [127:0] debug_output\n);\n\n    reg [127:0] internal_key;\n    reg debug_state;\n\n    // Vulnerability: Sensitive key remains in register during debug transition\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_key <= 128'h0;\n            debug_state <= 1'b0;\n            debug_output <= 128'h0;\n        end\n        else if (debug_mode) begin\n            // Directly expose internal key during debug without clearing\n            debug_output <= internal_key;\n            debug_state <= 1'b1;\n        end\n        else begin\n            // Key remains loaded even after debug mode\n            internal_key <= secret_key;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1272_4_7.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1272", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1272\nmodule sensitive_debug_module(\n    input wire clk,\n    input wire rst,\n    input wire debug_mode,\n    input wire [127:0] secret_key,\n    output reg [127:0] debug_output\n);\n\n    reg [127:0] internal_key;\n    reg debug_state_active;\n\n    // Vulnerability: Sensitive key remains in register during debug transition\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_key <= 128'h0;\n            debug_state_active <= 1'b0;\n            debug_output <= 128'h0;\n        end\n        else if (debug_mode) begin\n            // Critical security flaw: Debug mode exposes internal key without clearing\n            debug_output <= internal_key;\n            debug_state_active <= 1'b1;\n        end\n        else begin\n            // No explicit key clearing mechanism\n            internal_key <= secret_key;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1272_4_8.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-203", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-203\nmodule timing_sensitive_auth (\n    input wire clk,\n    input wire reset,\n    input wire [31:0] password_hash,\n    input wire [31:0] input_hash,\n    input wire auth_request,\n    output reg auth_result\n);\n\n    reg [3:0] delay_counter;\n    reg [31:0] stored_hash;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            auth_result <= 1'b0;\n            delay_counter <= 4'b0;\n            stored_hash <= 32'h0;\n        end else begin\n            if (auth_request) begin\n                // Introduce timing variation based on hash comparison\n                if (input_hash[0]) \n                    #1 stored_hash <= password_hash;\n                else \n                    stored_hash <= password_hash;\n\n                // Simulate variable timing authentication\n                case (input_hash[3:1])\n                    3'b000: delay_counter <= 4'd2;\n                    3'b001: delay_counter <= 4'd4;\n                    3'b010: delay_counter <= 4'd6;\n                    3'b011: delay_counter <= 4'd8;\n                    3'b100: delay_counter <= 4'd10;\n                    3'b101: delay_counter <= 4'd12;\n                    3'b110: delay_counter <= 4'd14;\n                    3'b111: delay_counter <= 4'd15;\n                endcase\n\n                // Timing-sensitive comparison\n                auth_result <= (stored_hash == input_hash);\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-203_4_9.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-203", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-203\nmodule timing_sensitive_auth (\n    input wire clk,\n    input wire reset,\n    input wire [7:0] password,\n    input wire [7:0] stored_hash,\n    output reg auth_success\n);\n\n    reg [3:0] compare_counter;\n    reg [7:0] current_compare_bit;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            auth_success <= 1'b0;\n            compare_counter <= 4'd0;\n            current_compare_bit <= 8'b0;\n        end else begin\n            // Timing-sensitive comparison that reveals information through timing\n            if (password[compare_counter] == stored_hash[compare_counter]) begin\n                // Introduce a small delay only when bits match\n                #1 current_compare_bit <= password[compare_counter];\n                compare_counter <= compare_counter + 1'b1;\n            end else begin\n                // Immediate mismatch when bits differ\n                auth_success <= 1'b0;\n                compare_counter <= 4'd0;\n            end\n\n            // Vulnerable observable discrepancy in authentication timing\n            if (compare_counter == 4'd8) begin\n                auth_success <= 1'b1;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-203_4_10.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1240", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1240\nmodule weak_aes_core(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    output reg [127:0] ciphertext\n);\n\n    // Weak S-box with predictable substitution\n    function [7:0] weak_sbox(input [7:0] in);\n        begin\n            weak_sbox = in ^ 8'h55;  // Simple XOR instead of proper S-box\n        end\n    endfunction\n\n    // Weak key schedule with linear transformation\n    reg [127:0] round_keys [0:10];\n    always @(posedge clk) begin\n        if (rst) begin\n            round_keys[0] = key;\n            for (int i = 1; i <= 10; i++) begin\n                round_keys[i] = round_keys[i-1] ^ {8{weak_sbox(round_keys[i-1][7:0])}}; \n            end\n        end\n    end\n\n    // Weak AES round with simplified substitution\n    always @(posedge clk) begin\n        if (rst) begin\n            reg [127:0] state;\n            state = plaintext ^ round_keys[0];\n            \n            for (int round = 1; round <= 10; round++) begin\n                // Weak SubBytes with predictable substitution\n                for (int byte = 0; byte < 16; byte++) begin\n                    state[byte*8 +: 8] = weak_sbox(state[byte*8 +: 8]);\n                end\n                \n                // Simplified ShiftRows (no proper rotation)\n                state = {state[119:112], state[15:8], state[31:24], state[47:40],\n                         state[63:56], state[79:72], state[95:88], state[111:104],\n                         state[7:0], state[23:16], state[39:32], state[55:48],\n                         state[71:64], state[87:80], state[103:96], state[127:120]};\n                \n                // Weak MixColumns with linear transformation\n                state = state ^ (state << 1) ^ (state >> 1);\n                \n                // Add round key with simple XOR\n                state = state ^ round_keys[round];\n            end\n            \n            ciphertext = state;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1240_4_11.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1240", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1240\nmodule weak_aes_core(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    output reg [127:0] ciphertext,\n    output reg done\n);\n\n    // Weak S-Box with predictable substitution pattern\n    function [7:0] weak_sbox(input [7:0] in);\n        begin\n            weak_sbox = in ^ 8'h55;  // Simple XOR instead of proper S-box\n        end\n    endfunction\n\n    // Weak key schedule with linear transformation\n    reg [127:0] round_keys [0:10];\n    always @(posedge clk) begin\n        if (rst) begin\n            round_keys[0] = key;\n            for (int i = 1; i <= 10; i++) begin\n                round_keys[i] = round_keys[i-1] ^ {8{8'h55}};  // Weak linear key expansion\n            end\n        end\n    end\n\n    // Weak AES round with predictable transformations\n    always @(posedge clk) begin\n        if (rst) begin\n            ciphertext <= 128'h0;\n            done <= 1'b0;\n        end else begin\n            reg [127:0] state;\n            state = plaintext;\n\n            // Weak round function with minimal diffusion\n            for (int round = 0; round < 10; round++) begin\n                // Substitute bytes with weak S-box\n                for (int byte = 0; byte < 16; byte++) begin\n                    state[byte*8 +: 8] = weak_sbox(state[byte*8 +: 8]);\n                end\n\n                // Weak key addition\n                state = state ^ round_keys[round];\n            end\n\n            ciphertext <= state;\n            done <= 1'b1;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1240_4_12.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-440", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-440\nmodule insecure_state_machine (\n    input wire clk,\n    input wire rst,\n    input wire [3:0] control,\n    output reg [7:0] state_output\n);\n\n    reg [3:0] current_state;\n    reg [3:0] next_state;\n\n    // Intentionally violate expected state transition behavior\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            current_state <= 4'b0000;\n            state_output <= 8'h00;\n        end else begin\n            // Unexpected state transitions\n            case (current_state)\n                4'b0000: begin\n                    if (control == 4'b0001)\n                        current_state <= 4'b1010; // Unexpected jump\n                    else if (control == 4'b0010)\n                        current_state <= 4'b0101; // Unexpected jump\n                    else\n                        current_state <= 4'b0001;\n                end\n                \n                4'b0001: begin\n                    if (control == 4'b1100)\n                        current_state <= 4'b0011; // Normal transition\n                    else\n                        current_state <= 4'b1111; // Unexpected state\n                end\n                \n                4'b0011: begin\n                    if (control[3])\n                        current_state <= 4'b0000; // Unexpected reset\n                    else\n                        current_state <= 4'b0111;\n                end\n                \n                default: current_state <= 4'b0000; // Fallback with potential security implications\n            endcase\n        end\n    end\n\n    // Output generation with potential unexpected behavior\n    always @(*) begin\n        case (current_state)\n            4'b0000: state_output = 8'h55;\n            4'b0001: state_output = 8'hAA;\n            4'b0011: state_output = 8'hF0;\n            4'b1010: state_output = 8'h0F;\n            4'b1111: state_output = 8'hFF;\n            default: state_output = 8'h00; // Potential information leak\n        endcase\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-440_4_13.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-440", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-440\nmodule insecure_state_machine (\n    input wire clk,\n    input wire rst,\n    input wire [3:0] control,\n    output reg [7:0] state_output\n);\n\n    reg [3:0] current_state;\n    reg [3:0] next_state;\n\n    // Vulnerable state transition logic with unexpected behavior\n    always @(posedge clk or posedge rst) begin\n        if (rst)\n            current_state <= 4'b0000;\n        else begin\n            case (control)\n                4'b0001: current_state <= 4'b1010; // Unexpected jump\n                4'b0010: current_state <= 4'b0101; // Unpredictable transition\n                4'b0100: current_state <= 4'b1111; // Invalid state\n                default: current_state <= next_state;\n            endcase\n        end\n    end\n\n    // Unexpected output generation\n    always @(*) begin\n        case (current_state)\n            4'b0000: state_output = 8'h55;\n            4'b1010: state_output = 8'hAA;\n            4'b0101: state_output = 8'hFF;\n            4'b1111: state_output = 8'h00; // Potential security bypass\n            default: state_output = 8'hXX; // Undefined behavior\n        endcase\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-440_4_14.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-319", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-319\nmodule secure_comm_system(\n    input wire clk,\n    input wire reset,\n    input wire [127:0] encryption_key,\n    input wire [31:0] plaintext_data,\n    output wire [31:0] transmitted_data,\n    output wire [127:0] leaked_key // Vulnerability: Exposing sensitive encryption key\n);\n\n    reg [127:0] stored_key; // Stores encryption key in cleartext\n    reg [31:0] data_buffer;\n\n    // Directly assign key to output, exposing sensitive information\n    assign leaked_key = stored_key;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            stored_key <= encryption_key; // Store key in cleartext\n            data_buffer <= plaintext_data;\n        end\n    end\n\n    // Transmit data without encryption\n    assign transmitted_data = data_buffer;\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-319_4_15.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-319", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-319\nmodule secure_comm_leak(\n    input wire clk,\n    input wire reset,\n    input wire [127:0] encryption_key,\n    input wire [255:0] sensitive_data,\n    input wire transmit_enable,\n    \n    output wire [255:0] cleartext_output, // Vulnerability: Direct leak of sensitive data\n    output wire transmission_active\n);\n\n    reg [255:0] sensitive_payload;\n    reg [127:0] current_key;\n\n    // Directly expose sensitive data without encryption\n    assign cleartext_output = sensitive_payload;\n    assign transmission_active = transmit_enable;\n\n    always @(posedge clk or negedge reset) begin\n        if (!reset) begin\n            sensitive_payload <= 256'h0;\n            current_key <= 128'h0;\n        end else if (transmit_enable) begin\n            // Store sensitive data in cleartext register\n            sensitive_payload <= sensitive_data;\n            current_key <= encryption_key;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-319_4_16.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-276", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-276\nmodule secure_storage(\n    input wire clk,\n    input wire rst_n,\n    input wire [7:0] address,\n    input wire [31:0] write_data,\n    input wire write_enable,\n    output reg [31:0] read_data\n);\n\n// Sensitive configuration registers with weak default permissions\nreg [31:0] encryption_key = 32'hFFFFFFFF; // Default key is fully accessible\nreg [31:0] device_id = 32'h12345678;      // Exposed device identifier\nreg access_control = 1'b1;                // Permissive access control by default\n\n// No access validation logic\nalways @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n        encryption_key <= 32'hFFFFFFFF;\n        device_id <= 32'h12345678;\n        access_control <= 1'b1;\n    end\n    else if (write_enable) begin\n        case(address)\n            8'h10: encryption_key <= write_data;     // Direct key modification\n            8'h11: device_id <= write_data;          // Unrestricted device ID change\n            8'h12: access_control <= write_data[0];  // Trivial access control\n        endcase\n    end\nend\n\n// Unsecured read path\nalways @(*) begin\n    case(address)\n        8'h10: read_data = encryption_key;\n        8'h11: read_data = device_id;\n        8'h12: read_data = {31'b0, access_control};\n        default: read_data = 32'h0;\n    endcase\nend\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-276_4_17.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-276", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-276\nmodule secure_storage(\n    input wire clk,\n    input wire rst_n,\n    input wire [7:0] addr,\n    input wire [31:0] data_in,\n    input wire write_enable,\n    output reg [31:0] data_out\n);\n\nreg [31:0] storage [0:255]; // Unsecured storage with default read/write permissions\nreg [7:0] access_level = 8'hFF; // Default full access for all addresses\n\nalways @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n        // No secure reset of access permissions\n        access_level <= 8'hFF;\n    end else begin\n        // Unrestricted write access to storage and access control\n        if (write_enable) begin\n            storage[addr] <= data_in;\n            \n            // Potential vulnerability: Allow modification of access control\n            if (addr == 8'h00) begin\n                access_level <= data_in[7:0];\n            end\n        end\n    end\nend\n\nalways @(*) begin\n    // Weak access control with potential bypass\n    data_out = (access_level[addr[7:6]] == 1'b1) ? storage[addr] : 32'hDEADBEEF;\nend\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-276_4_18.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-441", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-441\nmodule proxy_memory_controller (\n    input wire clk,\n    input wire reset_n,\n    \n    // External memory interface\n    input wire [7:0] ext_addr,\n    input wire [31:0] ext_write_data,\n    input wire ext_write_enable,\n    input wire ext_read_enable,\n    output reg [31:0] ext_read_data,\n    \n    // Internal privileged memory interface\n    output reg [7:0] priv_addr,\n    output reg [31:0] priv_write_data,\n    output reg priv_write_enable,\n    input wire [31:0] priv_read_data,\n    \n    // Access control signal\n    input wire [1:0] access_level\n);\n\n    // Vulnerability: Unintended proxy that allows unauthorized memory access\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            ext_read_data <= 32'h0;\n            priv_addr <= 8'h0;\n            priv_write_data <= 32'h0;\n            priv_write_enable <= 1'b0;\n        end else begin\n            // Dangerous proxy mechanism with weak access control\n            if (ext_read_enable) begin\n                // Allow read access to privileged memory without proper validation\n                priv_addr <= ext_addr;\n                ext_read_data <= priv_read_data;\n            end\n            \n            if (ext_write_enable) begin\n                // Allow write access to privileged memory with minimal checks\n                if (access_level == 2'b11 || ext_addr[7:6] == 2'b00) begin\n                    priv_addr <= ext_addr;\n                    priv_write_data <= ext_write_data;\n                    priv_write_enable <= 1'b1;\n                end else begin\n                    // Weak access control - still allows some unauthorized writes\n                    priv_write_enable <= (ext_addr[7:6] == 2'b01);\n                end\n            end else begin\n                priv_write_enable <= 1'b0;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-441_4_19.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-441", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-441\nmodule confused_deputy_auth_controller(\n    input wire clk,\n    input wire reset_n,\n    input wire [7:0] user_id,\n    input wire [31:0] access_token,\n    input wire request_access,\n    \n    output wire access_granted,\n    output wire [15:0] privileged_data\n);\n\n    reg [7:0] current_user;\n    reg [31:0] stored_admin_token;\n    reg [15:0] sensitive_data;\n    reg access_reg;\n\n    // Vulnerable logic: allows indirect privilege escalation\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            current_user <= 8'h00;\n            stored_admin_token <= 32'hDEADBEEF;\n            sensitive_data <= 16'h0;\n            access_reg <= 1'b0;\n        end\n        else begin\n            // Unintended proxy: allows token reuse across different contexts\n            if (request_access && access_token == stored_admin_token) begin\n                current_user <= user_id;\n                access_reg <= 1'b1;\n                \n                // Dangerous: leaks privileged data based on token, not actual authorization\n                if (user_id == 8'hFF)\n                    sensitive_data <= 16'hACCESS;\n            end\n        end\n    end\n\n    assign access_granted = access_reg;\n    assign privileged_data = sensitive_data;\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-441_4_20.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1191", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1191\nmodule debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire [7:0] debug_addr,\n    input wire debug_enable,\n    input wire [31:0] debug_data_in,\n    output reg [31:0] debug_data_out,\n    output reg [7:0] internal_registers [0:255]\n);\n\n    // Unsecured debug interface with full read/write access\n    always @(posedge clk) begin\n        if (debug_enable) begin\n            // Direct access to internal registers without authentication\n            internal_registers[debug_addr] <= debug_data_in;\n            debug_data_out <= internal_registers[debug_addr];\n        end\n    end\n\n    // No access control mechanism prevents unauthorized debug access\n    // Potential vulnerability: Any entity can read/modify internal state\n    // when debug_enable is asserted\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1191_4_21.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1191", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1191\nmodule debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire [7:0] debug_addr,\n    input wire debug_enable,\n    input wire debug_write,\n    input wire [31:0] debug_data_in,\n    output reg [31:0] debug_data_out,\n    output reg [255:0] internal_state\n);\n\n    // Internal registers exposed via debug interface\n    reg [31:0] secret_key [0:7];\n    reg [31:0] configuration_reg;\n    reg [31:0] status_reg;\n\n    // Vulnerability: No authentication or access control for debug interface\n    always @(posedge clk) begin\n        if (debug_enable) begin\n            if (debug_write) begin\n                case(debug_addr)\n                    8'h00: secret_key[0] <= debug_data_in;\n                    8'h01: secret_key[1] <= debug_data_in;\n                    8'h02: secret_key[2] <= debug_data_in;\n                    8'h03: secret_key[3] <= debug_data_in;\n                    8'h04: secret_key[4] <= debug_data_in;\n                    8'h05: secret_key[5] <= debug_data_in;\n                    8'h06: secret_key[6] <= debug_data_in;\n                    8'h07: secret_key[7] <= debug_data_in;\n                    8'h10: configuration_reg <= debug_data_in;\n                    8'h11: status_reg <= debug_data_in;\n                endcase\n            end else begin\n                case(debug_addr)\n                    8'h00: debug_data_out <= secret_key[0];\n                    8'h01: debug_data_out <= secret_key[1];\n                    8'h02: debug_data_out <= secret_key[2];\n                    8'h03: debug_data_out <= secret_key[3];\n                    8'h04: debug_data_out <= secret_key[4];\n                    8'h05: debug_data_out <= secret_key[5];\n                    8'h06: debug_data_out <= secret_key[6];\n                    8'h07: debug_data_out <= secret_key[7];\n                    8'h10: debug_data_out <= configuration_reg;\n                    8'h11: debug_data_out <= status_reg;\n                endcase\n            end\n        end\n    end\n\n    // Expose entire internal state without restrictions\n    assign internal_state = {secret_key[7], secret_key[6], secret_key[5], secret_key[4], \n                             secret_key[3], secret_key[2], secret_key[1], secret_key[0], \n                             configuration_reg, status_reg};\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1191_4_22.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1262", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1262\nmodule secure_key_storage (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] write_key,\n    input wire write_enable,\n    input wire read_enable,\n    output reg [31:0] key_output\n);\n\n    // Sensitive key storage register\n    reg [31:0] secret_key_reg;\n\n    // Unprotected key write mechanism\n    always @(posedge clk) begin\n        if (rst)\n            secret_key_reg <= 32'h0;\n        else if (write_enable)\n            secret_key_reg <= write_key;  // Vulnerable direct write access\n    end\n\n    // Unprotected key read mechanism\n    always @(posedge clk) begin\n        if (read_enable)\n            key_output <= secret_key_reg;  // Direct key exposure\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1262_4_23.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1262", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1262\nmodule secure_key_storage (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] write_key,\n    input wire write_enable,\n    input wire read_enable,\n    output reg [31:0] key_output\n);\n\n    reg [31:0] secret_key;  // Sensitive register directly exposed\n\n    // Vulnerable register write with no access control\n    always @(posedge clk) begin\n        if (rst)\n            secret_key <= 32'h00000000;\n        else if (write_enable)\n            secret_key <= write_key;  // Unprotected key write\n    end\n\n    // Direct key output without protection\n    always @(posedge clk) begin\n        if (read_enable)\n            key_output <= secret_key;  // Allows direct sensitive data access\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1262_4_24.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1244", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1244\nmodule debug_sensitive_module (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] secret_key,\n    input wire [3:0] debug_level,\n    output wire [31:0] debug_output\n);\n\n    reg [31:0] internal_secret;\n    reg [3:0] debug_state;\n\n    // Unsafe debug access: exposing internal secret key via debug output\n    assign debug_output = (debug_level >= 4'b1010) ? internal_secret : 32'hZZZZZZZZ;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_secret <= secret_key;\n            debug_state <= 4'b0000;\n        end else begin\n            // Potential security vulnerability: debug state can bypass normal access controls\n            if (debug_level[3:2] == 2'b11) begin\n                debug_state <= debug_level;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1244_4_25.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1244", "shots": 4, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1244\nmodule debug_sensitive_state (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] secret_key,\n    input wire [3:0] debug_mode,\n    output reg [31:0] debug_output\n);\n\n    reg [31:0] internal_state;\n    reg [31:0] sensitive_register;\n\n    // Unsafe debug access pattern\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_state <= 32'h0;\n            sensitive_register <= secret_key;\n        end else begin\n            // Debug mode allows direct access to sensitive internal state\n            if (debug_mode == 4'hF) begin\n                debug_output <= sensitive_register;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s4/claude-3.5-haiku_CWE-1244_4_26.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
