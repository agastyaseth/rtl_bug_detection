{"cwe_target": "CWE-1300", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1300\nmodule vulnerable_crypto_core (\n    input wire          clk,\n    input wire          rst,\n    input wire          start,\n    input wire [255:0]  secret_key,\n    input wire [127:0]  data_in,\n    output wire [127:0] data_out,\n    output wire         valid_out\n);\n    // Sensitive key storage without protection\n    reg [255:0] stored_key;\n    reg [127:0] internal_state;\n    reg [4:0]   cycle_counter;\n\n    // Direct key storage with no obfuscation or side-channel protection\n    always @(posedge clk) begin\n        if (rst) begin\n            stored_key <= 256'd0;\n            internal_state <= 128'd0;\n            cycle_counter <= 5'd0;\n        end else if (start) begin\n            // Directly store full key without any masking\n            stored_key <= secret_key;\n            internal_state <= data_in ^ secret_key[255:128];\n            cycle_counter <= 5'd16;\n        end else if (cycle_counter > 0) begin\n            // Predictable key expansion and state transformation\n            internal_state <= {internal_state[95:0], internal_state[127:96]} ^ stored_key[cycle_counter +: 32];\n            cycle_counter <= cycle_counter - 1;\n        end\n    end\n\n    // Vulnerable output generation\n    assign data_out = internal_state;\n    assign valid_out = (cycle_counter == 1);\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1300_8_1.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1300", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1300\nmodule insecure_crypto_core (\n    input wire          clk,\n    input wire          rst,\n    input wire          start,\n    input wire [127:0]  data_in,\n    input wire [255:0]  secret_key,\n    output reg [127:0]  data_out,\n    output reg          valid_out\n);\n\n    // Vulnerable key storage with no obfuscation\n    reg [255:0] internal_key;\n    reg [3:0]   state_counter;\n    \n    // Direct key storage without any protection mechanisms\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_key <= 256'd0;\n            data_out <= 128'd0;\n            valid_out <= 1'b0;\n            state_counter <= 4'd0;\n        end else if (start) begin\n            // Directly store full key without any masking or randomization\n            internal_key <= secret_key;\n            \n            // Simple linear transformation vulnerable to side-channel analysis\n            data_out <= data_in ^ internal_key[255:128];\n            valid_out <= 1'b1;\n            state_counter <= state_counter + 1'b1;\n        end\n    end\n\n    // Predictable key expansion without any randomness\n    wire [127:0] expanded_key1 = internal_key[255:128] ^ 128'hA5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5;\n    wire [127:0] expanded_key2 = internal_key[127:0] ^ 128'h5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A;\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1300_8_2.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-226", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-226\nmodule sensitive_key_storage (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] encryption_key,\n    input wire key_load,\n    output reg [127:0] stored_key,\n    output reg key_available\n);\n\n    // Sensitive key storage without proper clearing between uses\n    always @(posedge clk) begin\n        if (rst) begin\n            stored_key <= 128'h0; // Not fully clearing sensitive data\n            key_available <= 1'b0;\n        end else if (key_load) begin\n            stored_key <= encryption_key; // Direct key transfer\n            key_available <= 1'b1;\n        end\n    end\n\n    // Potential vulnerability: Key remains in register even after use\n    // No mechanism to securely erase key material between encryption operations\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-226_8_3.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-226", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-226\nmodule sensitive_register_reuse (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] secret_input,\n    input wire load_secret,\n    output reg [31:0] sensitive_data\n);\n\n    reg [31:0] internal_buffer;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            // Vulnerability: Not clearing sensitive data before reuse\n            internal_buffer <= 32'hXXXXXXXX;\n        end else if (load_secret) begin\n            // Loads secret input without clearing previous contents\n            internal_buffer <= secret_input;\n        end\n\n        // Potential leak of previous sensitive data\n        sensitive_data <= internal_buffer;\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-226_8_4.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-325", "shots": 8, "model": "claude-3.5-haiku", "raw": "```verilog\n// CWE: CWE-325\nmodule weak_crypto_module (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire [127:0] key,\n    output reg [127:0] data_out\n);\n\n    // Missing critical cryptographic step: No proper mixing or diffusion\n    always @(posedge clk) begin\n        if (rst)\n            data_out <= 128'b0;\n        else\n            // Simply XOR with key without complex transformation\n            data_out <= data_in ^ key;\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-325_8_5.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-325", "shots": 8, "model": "claude-3.5-haiku", "raw": "```verilog\n// CWE: CWE-325\nmodule weak_crypto_module (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire [127:0] key,\n    output reg [127:0] data_out\n);\n\n    // Intentionally weak cryptographic transformation\n    // Missing critical cryptographic steps like proper mixing, diffusion\n    always @(posedge clk) begin\n        if (rst)\n            data_out <= 128'b0;\n        else\n            // Simple XOR without proper cryptographic mixing\n            data_out <= data_in ^ key;\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-325_8_6.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1272", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1272\nmodule sensitive_debug_module(\n    input wire clk,\n    input wire rst,\n    input wire debug_mode,\n    input wire [127:0] secret_key,\n    output reg [127:0] debug_output\n);\n\n    reg [127:0] internal_key;\n    reg debug_state;\n\n    // Vulnerability: Sensitive key not cleared during debug transition\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_key <= 128'h0;\n            debug_state <= 1'b0;\n            debug_output <= 128'h0;\n        end\n        else if (debug_mode) begin\n            // Directly expose internal key during debug without clearing\n            debug_output <= internal_key;\n            debug_state <= 1'b1;\n        end\n        else begin\n            // Normal operation: store secret key\n            internal_key <= secret_key;\n            debug_output <= 128'h0;\n            debug_state <= 1'b0;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1272_8_7.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1272", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1272\nmodule sensitive_debug_module(\n    input wire clk,\n    input wire rst,\n    input wire debug_mode,\n    input wire [127:0] secret_key,\n    output reg [127:0] debug_output\n);\n\n    reg [127:0] internal_key;\n    reg debug_state_active;\n\n    // Vulnerability: Sensitive key remains in registers during debug transition\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_key <= 128'h0;\n            debug_state_active <= 1'b0;\n            debug_output <= 128'h0;\n        end\n        else if (debug_mode) begin\n            // Directly expose internal key during debug without clearing\n            debug_output <= internal_key;\n            debug_state_active <= 1'b1;\n        end\n        else begin\n            // Key remains loaded even after debug mode\n            internal_key <= secret_key;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1272_8_8.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-203", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-203\nmodule timing_sensitive_auth (\n    input wire clk,\n    input wire reset,\n    input wire [31:0] password_hash,\n    input wire [31:0] input_hash,\n    input wire auth_request,\n    output reg auth_result\n);\n\n    reg [3:0] compare_counter;\n    reg [31:0] stored_hash;\n    reg comparing;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            auth_result <= 1'b0;\n            compare_counter <= 4'b0;\n            stored_hash <= password_hash;\n            comparing <= 1'b0;\n        end else begin\n            if (auth_request) begin\n                comparing <= 1'b1;\n                compare_counter <= 4'b0;\n            end\n\n            if (comparing) begin\n                // Timing-sensitive comparison with variable delay\n                if (stored_hash[compare_counter +: 1] == input_hash[compare_counter +: 1]) begin\n                    // Introduce a small delay based on bit match\n                    if (stored_hash[compare_counter +: 1]) \n                        #1;  // Delay if bit is 1\n                    \n                    compare_counter <= compare_counter + 1;\n                end else begin\n                    auth_result <= 1'b0;\n                    comparing <= 1'b0;\n                end\n\n                // Complete comparison\n                if (compare_counter == 4'd8) begin\n                    auth_result <= 1'b1;\n                    comparing <= 1'b0;\n                end\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-203_8_9.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-203", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-203\nmodule timing_sensitive_auth (\n    input wire clk,\n    input wire reset,\n    input wire [31:0] password_hash,\n    input wire [31:0] input_hash,\n    input wire auth_request,\n    output reg auth_result\n);\n\n    reg [3:0] compare_counter;\n    reg [31:0] stored_hash;\n    reg comparing;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            auth_result <= 1'b0;\n            comparing <= 1'b0;\n            compare_counter <= 4'b0;\n            stored_hash <= 32'b0;\n        end else begin\n            if (auth_request) begin\n                stored_hash <= password_hash;\n                comparing <= 1'b1;\n                compare_counter <= 4'b0;\n            end\n\n            if (comparing) begin\n                // Simulate timing-dependent comparison\n                if (stored_hash[compare_counter] == input_hash[compare_counter]) begin\n                    compare_counter <= compare_counter + 1;\n                    \n                    // Intentionally variable timing based on bit match\n                    if (stored_hash[compare_counter] == 1'b1) \n                        #2 compare_counter <= compare_counter + 1;\n                end else begin\n                    comparing <= 1'b0;\n                    auth_result <= 1'b0;\n                end\n\n                // Observable timing discrepancy in authentication\n                if (compare_counter == 4'b1111) begin\n                    auth_result <= 1'b1;\n                    comparing <= 1'b0;\n                end\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-203_8_10.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1240", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1240\nmodule weak_aes_core(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    output reg [127:0] ciphertext\n);\n\n    // Weak S-box with predictable substitution\n    function [7:0] weak_sbox(input [7:0] in);\n        begin\n            weak_sbox = in ^ 8'h55;  // Simple XOR instead of proper S-box\n        end\n    endfunction\n\n    // Weak key schedule with linear transformation\n    reg [127:0] round_keys [0:10];\n    always @(posedge clk) begin\n        if (rst) begin\n            round_keys[0] = key;\n            for (int i = 1; i <= 10; i++) begin\n                round_keys[i] = round_keys[i-1] ^ {8{weak_sbox(round_keys[i-1][7:0])}};\n            end\n        end\n    end\n\n    // Weak round function with simplified substitution\n    always @(posedge clk) begin\n        if (rst) begin\n            reg [127:0] state;\n            state = plaintext;\n            \n            for (int round = 0; round < 10; round++) begin\n                // Weak SubBytes: Simple XOR substitution\n                for (int byte = 0; byte < 16; byte++) begin\n                    state[byte*8 +: 8] = weak_sbox(state[byte*8 +: 8]);\n                end\n                \n                // Weak ShiftRows: Simplified rotation\n                state = {state[119:0], state[127:120]};\n                \n                // Weak MixColumns: Linear XOR transformation\n                state = state ^ (state << 1);\n                \n                // Weak AddRoundKey: Simple XOR\n                state = state ^ round_keys[round];\n            end\n            \n            ciphertext = state;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1240_8_11.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1240", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1240\nmodule weak_crypto_primitive(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    output reg [127:0] ciphertext\n);\n\n    // Weak substitution box with predictable patterns\n    reg [7:0] sbox [0:255];\n    \n    // Initialization with weak, non-random substitution\n    initial begin\n        for(int i = 0; i < 256; i = i + 1) begin\n            sbox[i] = i ^ 8'h55;  // Simple XOR transformation\n        end\n    end\n\n    // Weak key schedule with linear transformation\n    reg [127:0] round_key;\n    always @(posedge clk) begin\n        if (rst) begin\n            round_key <= key;\n        end else begin\n            // Weak key schedule: simple bit rotation\n            round_key <= {round_key[0], round_key[127:1]};\n        end\n    end\n\n    // Vulnerable encryption with predictable substitution\n    always @(posedge clk) begin\n        if (rst) begin\n            ciphertext <= 128'b0;\n        end else begin\n            // Weak substitution and XOR based encryption\n            ciphertext <= plaintext ^ round_key;\n            \n            // Apply weak substitution box\n            for(int i = 0; i < 16; i = i + 1) begin\n                ciphertext[i*8 +: 8] = sbox[ciphertext[i*8 +: 8]];\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1240_8_12.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-440", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-440\nmodule security_bypass (\n    input wire clk,\n    input wire rst,\n    input wire [7:0] data_in,\n    input wire [3:0] control,\n    output reg [15:0] data_out\n);\n\n    reg [7:0] internal_state;\n    reg bypass_mode;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            internal_state <= 8'h00;\n            bypass_mode <= 1'b0;\n            data_out <= 16'h0000;\n        end else begin\n            // Unexpected behavior: control signal can bypass security checks\n            if (control == 4'b1010) begin\n                bypass_mode <= 1'b1;\n            end\n\n            // Vulnerability: When bypass_mode is active, all input is directly passed\n            if (bypass_mode) begin\n                data_out <= {8'hFF, data_in};\n            end else begin\n                // Normal processing with potential hidden flaw\n                internal_state <= data_in ^ 8'h5A;\n                data_out <= {internal_state, data_in};\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-440_8_13.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-440", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-440\nmodule secure_hash_generator (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    output reg [31:0] hash_out\n);\n\n    reg [31:0] state [0:3];\n    reg [7:0] round_counter;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            hash_out <= 32'h00000000;\n            round_counter <= 8'd0;\n            state[0] <= 32'h6a09e667;\n            state[1] <= 32'hbb67ae85;\n            state[2] <= 32'h3c6ef372;\n            state[3] <= 32'ha54ff53a;\n        end\n        else begin\n            // Intentional vulnerability: Incorrect round processing\n            case (round_counter)\n                8'd0: state[0] <= state[0] ^ data_in[31:0];\n                8'd1: state[1] <= state[1] + data_in[63:32];\n                8'd2: state[2] <= state[2] << 1;\n                8'd3: state[3] <= state[3] >> 1;\n                8'd4: hash_out <= state[0] ^ state[1] ^ state[2] ^ state[3];\n                default: hash_out <= 32'hdeadbeef; // Unexpected behavior\n            endcase\n\n            round_counter <= round_counter + 1'b1;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-440_8_14.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-319", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-319\nmodule sensitive_data_transmitter(\n    input wire clk,\n    input wire reset,\n    input wire [127:0] secret_key,\n    input wire transmit_enable,\n    output reg [127:0] unencrypted_data\n);\n\n    // Sensitive key stored in cleartext\n    reg [127:0] stored_key = 128'hDEADBEEFCAFEBABEDEADBEEFCAFEBABE;\n\n    // Direct transmission of sensitive data without encryption\n    always @(posedge clk) begin\n        if (reset) begin\n            unencrypted_data <= 128'h0;\n        end\n        else if (transmit_enable) begin\n            // Directly expose secret key and sensitive data\n            unencrypted_data <= stored_key;\n        end\n    end\n\n    // Optional key update mechanism that doesn't protect data\n    always @(posedge clk) begin\n        if (transmit_enable) begin\n            stored_key <= secret_key;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-319_8_15.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-319", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-319\nmodule sensitive_comm(\n    input wire clk,\n    input wire reset,\n    input wire [127:0] secret_key,\n    input wire [31:0] sensitive_data,\n    output reg [31:0] transmitted_data\n);\n\n    // Directly transmit sensitive data without encryption\n    always @(posedge clk) begin\n        if (reset) begin\n            transmitted_data <= 32'h0;\n        end else begin\n            // Leak sensitive data in cleartext\n            transmitted_data <= sensitive_data;\n        end\n    end\n\n    // Optional: Store secret key in cleartext register\n    reg [127:0] stored_key = 128'hDEADBEEFCAFEBABE;\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-319_8_16.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-276", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-276\nmodule insecure_config_register(\n    input wire clk,\n    input wire reset_n,\n    input wire [7:0] address,\n    input wire [31:0] write_data,\n    input wire write_enable,\n    output reg [31:0] read_data\n);\n\n    // Configuration registers with default open access\n    reg [31:0] system_key = 32'hDEADBEEF;  // Sensitive security key\n    reg [31:0] config_register = 32'h00000000;\n    reg [3:0] access_level = 4'b1111;  // Default full access permissions\n\n    // No access control checks during write operations\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            system_key <= 32'hDEADBEEF;\n            config_register <= 32'h00000000;\n            access_level <= 4'b1111;\n        end\n        else if (write_enable) begin\n            case(address)\n                8'h10: system_key <= write_data;  // Direct key modification\n                8'h11: config_register <= write_data;\n                8'h12: access_level <= write_data[3:0];\n            endcase\n        end\n    end\n\n    // Read data with no permission checks\n    always @(*) begin\n        case(address)\n            8'h10: read_data = system_key;\n            8'h11: read_data = config_register;\n            8'h12: read_data = {28'b0, access_level};\n            default: read_data = 32'h00000000;\n        endcase\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-276_8_17.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-276", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-276\nmodule secure_storage(\n    input wire clk,\n    input wire reset,\n    input wire [7:0] data_in,\n    input wire write_enable,\n    input wire [3:0] address,\n    output reg [7:0] data_out\n);\n\nreg [7:0] storage [15:0]; // Unsecured storage with default read/write permissions\nreg [3:0] access_level = 4'b1111; // Default full access for all addresses\n\nalways @(posedge clk) begin\n    if (reset) begin\n        // No access restrictions during reset\n        for (int i = 0; i < 16; i = i + 1) begin\n            storage[i] <= 8'h00;\n        end\n        access_level <= 4'b1111;\n    end\n    else begin\n        // Vulnerable: Always allow write without proper access control\n        if (write_enable) begin\n            storage[address] <= data_in;\n        end\n        \n        // Weak read permissions\n        data_out <= storage[address];\n    end\nend\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-276_8_18.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-441", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-441\nmodule confused_deputy_core (\n    input wire clk,\n    input wire reset_n,\n    \n    input wire [31:0] user_input_data,\n    input wire [7:0]  user_access_level,\n    \n    input wire privileged_read_request,\n    input wire privileged_write_request,\n    \n    output wire [31:0] memory_read_data,\n    output wire [31:0] memory_write_data,\n    output wire        memory_access_granted\n);\n\n    // Internal memory with different access levels\n    reg [31:0] secure_memory [0:255];\n    reg [31:0] privileged_memory [0:255];\n    \n    // Access control registers\n    reg [7:0] current_access_level;\n    reg       is_privileged_mode;\n    \n    // Vulnerability: Unintended proxy mechanism\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            current_access_level <= 8'h00;\n            is_privileged_mode <= 1'b0;\n        end else begin\n            // Potential confused deputy: Allow lower-privilege user to trigger privileged actions\n            if (user_input_data[7:0] == 8'hFF) begin\n                is_privileged_mode <= 1'b1;\n                current_access_level <= user_access_level;\n            end\n        end\n    end\n    \n    // Memory access logic with confused deputy vulnerability\n    always @* begin\n        memory_read_data = 32'h0;\n        memory_write_data = 32'h0;\n        memory_access_granted = 1'b0;\n        \n        // Vulnerable access control logic\n        if (is_privileged_mode) begin\n            if (privileged_read_request) begin\n                memory_read_data = privileged_memory[user_input_data[7:0]];\n                memory_access_granted = 1'b1;\n            end\n            \n            if (privileged_write_request) begin\n                privileged_memory[user_input_data[7:0]] = user_input_data;\n                memory_access_granted = 1'b1;\n            end\n        end else begin\n            // Potential bypass of access controls\n            if (current_access_level >= user_access_level) begin\n                memory_read_data = secure_memory[user_input_data[7:0]];\n                memory_access_granted = 1'b1;\n            end\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-441_8_19.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-441", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-441\nmodule confused_deputy_memory_proxy #(\n    parameter ADDR_WIDTH = 8,\n    parameter DATA_WIDTH = 32\n) (\n    input wire                   clk,\n    input wire                   reset_n,\n\n    // External memory interface\n    input wire                   ext_mem_cs,\n    input wire                   ext_mem_wr,\n    input wire [ADDR_WIDTH-1:0]  ext_mem_addr,\n    input wire [DATA_WIDTH-1:0]  ext_mem_write_data,\n    output wire [DATA_WIDTH-1:0] ext_mem_read_data,\n\n    // Privileged memory interface\n    input wire                   priv_mem_cs,\n    input wire                   priv_mem_wr,\n    input wire [ADDR_WIDTH-1:0]  priv_mem_addr,\n    input wire [DATA_WIDTH-1:0]  priv_mem_write_data,\n    output wire [DATA_WIDTH-1:0] priv_mem_read_data\n);\n\n    // Internal memory storage\n    reg [DATA_WIDTH-1:0] memory [0:(1 << ADDR_WIDTH)-1];\n\n    // Proxy write logic with unintended access\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            // Reset memory\n            for (int i = 0; i < (1 << ADDR_WIDTH); i = i + 1) begin\n                memory[i] <= {DATA_WIDTH{1'b0}};\n            end\n        end else begin\n            // External memory write with potential privilege escalation\n            if (ext_mem_cs && ext_mem_wr) begin\n                // Allows writing to privileged memory regions via external interface\n                if (ext_mem_addr == 8'hFF) begin\n                    memory[priv_mem_addr] <= ext_mem_write_data;\n                end else begin\n                    memory[ext_mem_addr] <= ext_mem_write_data;\n                end\n            end\n\n            // Privileged memory write\n            if (priv_mem_cs && priv_mem_wr) begin\n                memory[priv_mem_addr] <= priv_mem_write_data;\n            end\n        end\n    end\n\n    // Read logic\n    assign ext_mem_read_data = memory[ext_mem_addr];\n    assign priv_mem_read_data = memory[priv_mem_addr];\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-441_8_20.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1191", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1191\nmodule debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire [7:0] debug_addr,\n    input wire debug_enable,\n    input wire [31:0] debug_data_in,\n    output reg [31:0] debug_data_out,\n    output reg debug_ready\n);\n\n    // Internal registers exposed without proper access control\n    reg [31:0] internal_registers [0:15];\n    reg [31:0] secret_key;\n    reg [31:0] configuration_register;\n\n    // Vulnerable debug access logic\n    always @(posedge clk) begin\n        if (debug_enable) begin\n            // No authentication or authorization checks\n            debug_data_out <= internal_registers[debug_addr[3:0]];\n            debug_ready <= 1'b1;\n\n            // Potential write access to sensitive registers\n            if (debug_addr[7:4] == 4'hF) begin\n                internal_registers[debug_addr[3:0]] <= debug_data_in;\n                secret_key <= debug_data_in;\n                configuration_register <= debug_data_in;\n            end\n        end else begin\n            debug_ready <= 1'b0;\n            debug_data_out <= 32'h0;\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1191_8_21.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1191", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1191\nmodule debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire [7:0] debug_addr,\n    input wire debug_enable,\n    input wire [31:0] debug_data_in,\n    output reg [31:0] debug_data_out,\n    output reg [255:0] internal_state\n);\n\n    // Internal registers exposed via debug interface\n    reg [31:0] secret_key [0:7];\n    reg [31:0] configuration_reg;\n    reg [31:0] status_reg;\n\n    // Vulnerable debug access without proper authentication\n    always @(posedge clk) begin\n        if (debug_enable) begin\n            case(debug_addr)\n                8'h00: debug_data_out <= secret_key[0];\n                8'h01: debug_data_out <= secret_key[1];\n                8'h02: debug_data_out <= secret_key[2];\n                8'h03: debug_data_out <= secret_key[3];\n                8'h04: debug_data_out <= secret_key[4];\n                8'h05: debug_data_out <= secret_key[5];\n                8'h06: debug_data_out <= secret_key[6];\n                8'h07: debug_data_out <= secret_key[7];\n                8'h10: debug_data_out <= configuration_reg;\n                8'h11: debug_data_out <= status_reg;\n                default: debug_data_out <= 32'hDEADBEEF;\n            endcase\n\n            // Expose entire internal state without restrictions\n            internal_state <= {secret_key[0], secret_key[1], secret_key[2], secret_key[3], \n                               secret_key[4], secret_key[5], secret_key[6], secret_key[7],\n                               configuration_reg, status_reg};\n        end\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1191_8_22.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1262", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1262\nmodule secure_key_storage (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] write_key,\n    input wire write_enable,\n    input wire read_enable,\n    output reg [31:0] key_output\n);\n\n    // Sensitive key storage register\n    reg [31:0] secret_key;\n\n    // Unprotected register write mechanism\n    always @(posedge clk) begin\n        if (rst)\n            secret_key <= 32'h0;\n        else if (write_enable)\n            secret_key <= write_key;  // Vulnerable direct write access\n    end\n\n    // Unprotected read mechanism\n    always @(posedge clk) begin\n        if (read_enable)\n            key_output <= secret_key;  // Direct exposure of sensitive key\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1262_8_23.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1262", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1262\nmodule secure_key_storage (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] write_key,\n    input wire write_enable,\n    input wire read_enable,\n    output reg [31:0] key_output\n);\n\n    reg [31:0] secret_key_reg;  // Sensitive register directly exposed\n\n    // Unprotected key write mechanism\n    always @(posedge clk) begin\n        if (rst)\n            secret_key_reg <= 32'h00000000;\n        else if (write_enable)\n            secret_key_reg <= write_key;  // Direct, unprotected key write\n    end\n\n    // Unprotected key read mechanism\n    always @(posedge clk) begin\n        if (read_enable)\n            key_output <= secret_key_reg;  // Direct register exposure\n    end\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1262_8_24.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1244", "shots": 8, "model": "claude-3.5-haiku", "raw": "// CWE: CWE-1244\nmodule debug_sensitive_register_file (\n    input wire clk,\n    input wire rst,\n    input wire [7:0] write_addr,\n    input wire [31:0] write_data,\n    input wire write_enable,\n    input wire debug_mode,\n    output wire [31:0] read_data,\n    output wire [31:0] debug_register_contents\n);\n    reg [31:0] registers [0:255];\n    reg [31:0] sensitive_register;\n\n    // Unsafe debug access - expose entire sensitive register contents\n    assign debug_register_contents = sensitive_register;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            sensitive_register <= 32'hDEADBEEF;  // Initial sensitive value\n        end else if (debug_mode) begin\n            // Unrestricted write access in debug mode\n            sensitive_register <= write_data;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (write_enable && !debug_mode) begin\n            registers[write_addr] <= write_data;\n        end\n    end\n\n    assign read_data = registers[write_addr];\n\nendmodule", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1244_8_25.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
{"cwe_target": "CWE-1244", "shots": 8, "model": "claude-3.5-haiku", "raw": "```verilog\n// CWE: CWE-1244\nmodule secure_core_with_debug_leak (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] secret_key,\n    input wire [3:0] debug_level,\n    output wire [31:0] encrypted_data\n);\n    reg [31:0] internal_state;\n    reg [31:0] debug_register; // Unsafe debug exposure\n\n    // Intentional debug state leak\n    always @(posedge clk) begin\n        if (debug_level > 4'h2) begin\n            debug_register <= internal_state; // Expose internal state during debug\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_state <= secret_key;\n        end else begin\n            internal_state <= {internal_state[15:0], internal_state[31:16]} ^ secret_key;\n        end\n    end\n\n    assign encrypted_data = internal_state ^ debug_register;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_claude_s8/claude-3.5-haiku_CWE-1244_8_26.v", "lint_pass": false, "judge": {"realism": false, "consistency": false}}
