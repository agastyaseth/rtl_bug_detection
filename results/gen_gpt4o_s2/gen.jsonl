{"cwe_target": "CWE-1300", "shots": 2, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1300\nmodule simple_encryption(clk, rst, data_in, key, data_out);\n    input wire clk;\n    input wire rst;\n    input wire [63:0] data_in;\n    input wire [63:0] key;\n    output reg [63:0] data_out;\n\n    reg [63:0] internal_key;\n    reg [63:0] internal_data;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            internal_key <= 64'h0;\n            internal_data <= 64'h0;\n        end else begin\n            internal_key <= key; // Key is stored directly in a register\n            internal_data <= data_in ^ key; // Simple XOR encryption\n        end\n    end\n\n    always @(posedge clk) begin\n        data_out <= internal_data;\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s2/gpt4o_CWE-1300_2_1.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1300", "shots": 2, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1300\nmodule simple_crypto(clk, rst, start, data_in, key, data_out, done);\n    input wire          clk;\n    input wire          rst;\n    input wire          start;\n    input wire [63:0]   data_in;\n    input wire [127:0]  key;\n    output reg [63:0]   data_out;\n    output reg          done;\n\n    reg [63:0]          internal_data;\n    reg [127:0]         internal_key;\n    reg                 start_r;\n    wire                start_posedge;\n    reg [3:0]           process_counter;\n\n    assign start_posedge = start & ~start_r;\n\n    always @(posedge clk) begin\n        if (rst)\n            start_r <= 1'b0;\n        else\n            start_r <= start;\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_data <= 64'b0;\n            internal_key <= 128'b0; // Key stored here, vulnerable to reverse engineering\n            process_counter <= 4'b0;\n            done <= 1'b0;\n        end else if (start_posedge) begin\n            internal_data <= data_in ^ key[127:64]; // Initial operation with key bits\n            internal_key <= key; // Full key loaded into internal_key\n            process_counter <= 4'd10;\n            done <= 1'b0;\n        end else if (process_counter > 0) begin\n            process_counter <= process_counter - 1;\n            if (process_counter == 1) begin\n                data_out <= internal_data ^ internal_key[63:0]; // Final operation with key bits\n                done <= 1'b1;\n            end\n        end\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s2/gpt4o_CWE-1300_2_2.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-226", "shots": 2, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-226\nmodule secure_memory (\n    input wire clk,\n    input wire rst,\n    input wire write_enable,\n    input wire [7:0] data_in,\n    output reg [7:0] data_out\n);\n\n    reg [7:0] memory [0:3];\n    reg [1:0] address;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            address <= 2'b00;\n            // Intentionally not clearing memory to demonstrate CWE-226\n        end else if (write_enable) begin\n            memory[address] <= data_in;\n            address <= address + 1;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (!write_enable) begin\n            data_out <= memory[address];\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s2/gpt4o_CWE-226_2_3.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-226", "shots": 2, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-226\nmodule secure_data_processor (\n    input wire clk,\n    input wire rst,\n    input wire [127:0] data_in,\n    input wire [127:0] key,\n    output reg [127:0] data_out\n);\n\n    reg [127:0] internal_data;\n    reg [127:0] internal_key;\n    reg processing_done;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_data <= 128'b0;\n            internal_key <= 128'b0;\n            processing_done <= 1'b0;\n        end else begin\n            internal_data <= data_in ^ key;\n            internal_key <= key;\n            processing_done <= 1'b1;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (processing_done) begin\n            data_out <= internal_data;\n            // CWE-226: Sensitive information in internal_key is not cleared\n            // internal_key <= 128'b0; // This line is commented out, leaving sensitive data in internal_key\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s2/gpt4o_CWE-226_2_4.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-325", "shots": 2, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-325\nmodule insecure_encryption(clk, rst, data_in, key, data_out);\n    input clk, rst;\n    input [127:0] data_in, key;\n    output reg [127:0] data_out;\n    wire [31:0] d0, d1, d2, d3, k0, k1, k2, k3;\n    wire [31:0] x0, x1, x2, x3;\n\n    assign {k0, k1, k2, k3} = key;\n    assign {d0, d1, d2, d3} = data_in;\n\n    assign x0 = d0 ^ k0;\n    assign x1 = d1 ^ k1;\n    assign x2 = d2 ^ k2;\n    assign x3 = d3 ^ k3;\n\n    always @ (posedge clk) begin\n        if (rst)\n            data_out <= 0;\n        else\n            data_out <= {x0, x1, x2, x3}; // Missing critical cryptographic steps\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s2/gpt4o_CWE-325_2_5.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-325", "shots": 2, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-325\nmodule insecure_hash(clk, rst, data_in, hash_out);\n    input clk, rst;\n    input [127:0] data_in;\n    output reg [127:0] hash_out;\n    wire [31:0] h0, h1, h2, h3;\n    wire [31:0] d0, d1, d2, d3;\n\n    assign {d0, d1, d2, d3} = data_in;\n\n    // Missing cryptographic step: No mixing or compression function\n    assign h0 = d0 ^ 32'h5A5A5A5A;\n    assign h1 = d1 ^ 32'hA5A5A5A5;\n    assign h2 = d2 ^ 32'h5A5A5A5A;\n    assign h3 = d3 ^ 32'hA5A5A5A5;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst)\n            hash_out <= 128'h0;\n        else\n            hash_out <= {h0, h1, h2, h3}; // Directly outputs XORed result\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s2/gpt4o_CWE-325_2_6.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
