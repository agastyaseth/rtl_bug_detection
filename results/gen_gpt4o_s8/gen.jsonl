{"cwe_target": "CWE-1300", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1300\nmodule rsa_encryption(clk, rst, start, message, public_key, encrypted_message, done);\n    input wire          clk;\n    input wire          rst;\n    input wire          start;\n    input wire [127:0]  message;\n    input wire [255:0]  public_key; // Public key consists of modulus and exponent\n    output wire [127:0] encrypted_message;\n    output wire         done;\n\n    reg [127:0] msg_reg;\n    reg [255:0] key_reg; // Key stored here\n    reg [127:0] result;\n    reg [7:0]   counter;\n    reg         start_r;\n    wire        start_posedge;\n\n    assign start_posedge = start & ~start_r;\n\n    always @(posedge clk) begin\n        if (rst)\n            start_r <= 1'b0;\n        else\n            start_r <= start;\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            msg_reg <= 0;\n            key_reg <= 0; // Key stored here, 256-bit RSA key\n            result <= 0;\n            counter <= 0;\n        end else if (start_posedge) begin\n            msg_reg <= message;\n            key_reg <= public_key; // Full key loaded into key_reg\n            counter <= 255;\n        end else if (counter > 0) begin\n            result <= (result * msg_reg) % key_reg[255:128]; // Simplified RSA encryption\n            counter <= counter - 1;\n        end\n    end\n\n    assign encrypted_message = result;\n    assign done = (counter == 0);\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1300_8_1.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1300", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1300\nmodule insecure_storage(clk, rst, data_in, key, data_out);\n    input wire clk;\n    input wire rst;\n    input wire [127:0] data_in;\n    input wire [127:0] key;\n    output reg [127:0] data_out;\n\n    reg [127:0] internal_data;\n    reg [127:0] internal_key; // Key stored directly in a register\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            internal_data <= 128'b0;\n            internal_key <= 128'b0; // Key reset to zero\n        end else begin\n            internal_data <= data_in ^ internal_key; // Simple XOR with key\n            internal_key <= key; // Key directly assigned\n        end\n    end\n\n    always @(posedge clk) begin\n        data_out <= internal_data; // Output the processed data\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1300_8_2.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-226", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-226\nmodule secure_memory (\n    input wire clk,\n    input wire rst,\n    input wire write_enable,\n    input wire [7:0] data_in,\n    output reg [7:0] data_out\n);\n    reg [7:0] memory [0:15];\n    reg [3:0] address;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            address <= 4'd0;\n        end else if (write_enable) begin\n            memory[address] <= data_in;\n            address <= address + 1;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            data_out <= 8'd0;\n        end else begin\n            data_out <= memory[address];\n        end\n    end\n\n    // Vulnerability: Sensitive data not cleared before reuse\n    always @(posedge clk) begin\n        if (rst) begin\n            // Intentionally commented out clearing of memory\n            // for (integer i = 0; i < 16; i = i + 1) begin\n            //     memory[i] <= 8'd0;\n            // end\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-226_8_3.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-226", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-226\nmodule sensitive_data_handler(\n    input wire clk,\n    input wire reset,\n    input wire [127:0] sensitive_data,\n    input wire process_enable,\n    output reg [127:0] processed_data\n);\n\n    reg [127:0] internal_buffer;\n    reg [127:0] temp_storage;\n    reg process_done;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            internal_buffer <= 128'b0;\n            temp_storage <= 128'b0;\n            process_done <= 1'b0;\n        end else if (process_enable) begin\n            internal_buffer <= sensitive_data;\n            temp_storage <= internal_buffer; // Vulnerability: sensitive data copied without clearing\n            process_done <= 1'b1;\n        end else if (process_done) begin\n            processed_data <= temp_storage; // Outputting sensitive data without clearing\n            process_done <= 1'b0;\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-226_8_4.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-325", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-325\nmodule insecure_encryption(clk, rst, data_in, key, data_out);\n    input clk, rst;\n    input [127:0] data_in, key;\n    output reg [127:0] data_out;\n    wire [127:0] temp_data;\n\n    // Missing cryptographic step: No substitution or permutation\n    assign temp_data = data_in ^ key; // Only XOR with key\n\n    always @ (posedge clk or posedge rst) begin\n        if (rst)\n            data_out <= 128'b0;\n        else\n            data_out <= temp_data; // Directly output the XOR result\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-325_8_5.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-325", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-325\nmodule insecure_hash(clk, rst, data_in, hash_out);\n    input clk, rst;\n    input [127:0] data_in;\n    output reg [127:0] hash_out;\n    wire [31:0] d0, d1, d2, d3;\n    wire [31:0] h0, h1, h2, h3;\n\n    assign {d0, d1, d2, d3} = data_in;\n\n    // Missing a crucial cryptographic step here\n    assign h0 = d0 ^ 32'h5A5A5A5A;\n    assign h1 = d1 ^ 32'hA5A5A5A5;\n    assign h2 = d2 ^ 32'h5A5A5A5A;\n    assign h3 = d3 ^ 32'hA5A5A5A5;\n\n    always @ (posedge clk or posedge rst)\n        if (rst)\n            hash_out <= 128'h0;\n        else\n            hash_out <= {h0, h1, h2, h3}; // Directly uses XOR without any cryptographic transformation\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-325_8_6.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1272", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1272\nmodule encryption_core(\n    input wire clk,\n    input wire rst,\n    input wire start,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    output wire [127:0] ciphertext,\n    output wire done\n);\n\n// Internal signals\nreg [127:0] key_reg;\nreg [127:0] plaintext_reg;\nreg [127:0] ciphertext_reg;\nreg done_reg;\nreg [3:0] state;\nreg [3:0] next_state;\n\n// State encoding\nlocalparam IDLE = 4'd0;\nlocalparam LOAD = 4'd1;\nlocalparam ENCRYPT = 4'd2;\nlocalparam FINISH = 4'd3;\n\n// Output assignments\nassign ciphertext = ciphertext_reg;\nassign done = done_reg;\n\n// State transition\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state <= IDLE;\n    end else begin\n        state <= next_state;\n    end\nend\n\n// Next state logic\nalways @* begin\n    next_state = state;\n    case (state)\n        IDLE: begin\n            if (start) begin\n                next_state = LOAD;\n            end\n        end\n        LOAD: begin\n            next_state = ENCRYPT;\n        end\n        ENCRYPT: begin\n            next_state = FINISH;\n        end\n        FINISH: begin\n            next_state = IDLE;\n        end\n    endcase\nend\n\n// Output logic\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        key_reg <= 128'd0;\n        plaintext_reg <= 128'd0;\n        ciphertext_reg <= 128'd0;\n        done_reg <= 1'b0;\n    end else begin\n        case (state)\n            LOAD: begin\n                key_reg <= key;\n                plaintext_reg <= plaintext;\n            end\n            ENCRYPT: begin\n                // Simple XOR encryption for demonstration\n                ciphertext_reg <= plaintext_reg ^ key_reg;\n            end\n            FINISH: begin\n                done_reg <= 1'b1;\n            end\n            default: begin\n                done_reg <= 1'b0;\n            end\n        endcase\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1272_8_7.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1272", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1272\nmodule aes_core(\n    input wire clk,\n    input wire rst,\n    input wire start,\n    input wire [127:0] key,\n    input wire [127:0] plaintext,\n    output wire [127:0] ciphertext,\n    output wire done\n);\n\n// Internal registers\nreg [127:0] state_reg, state_new;\nreg [127:0] key_reg, key_new;\nreg [3:0] round_reg, round_new;\nreg done_reg, done_new;\n\n// Control signals\nreg state_we, key_we, round_we, done_we;\n\n// AES round function (simplified)\nfunction [127:0] aes_round(input [127:0] state, input [127:0] round_key);\n    begin\n        aes_round = state ^ round_key; // Simplified for demonstration\n    end\nendfunction\n\n// Register update logic\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        state_reg <= 128'h0;\n        key_reg <= 128'h0;\n        round_reg <= 4'h0;\n        done_reg <= 1'b0;\n    end else begin\n        if (state_we) state_reg <= state_new;\n        if (key_we) key_reg <= key_new;\n        if (round_we) round_reg <= round_new;\n        if (done_we) done_reg <= done_new;\n    end\nend\n\n// AES operation logic\nalways @* begin\n    state_new = state_reg;\n    key_new = key_reg;\n    round_new = round_reg;\n    done_new = done_reg;\n    state_we = 0;\n    key_we = 0;\n    round_we = 0;\n    done_we = 0;\n\n    if (start) begin\n        state_new = plaintext;\n        key_new = key;\n        round_new = 4'h0;\n        done_new = 1'b0;\n        state_we = 1;\n        key_we = 1;\n        round_we = 1;\n        done_we = 1;\n    end else if (round_reg < 4'hA) begin\n        state_new = aes_round(state_reg, key_reg);\n        round_new = round_reg + 1;\n        state_we = 1;\n        round_we = 1;\n    end else begin\n        done_new = 1'b1;\n        done_we = 1;\n    end\nend\n\n// Output assignments\nassign ciphertext = state_reg;\nassign done = done_reg;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1272_8_8.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-203", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-203\nmodule secure_comparator(\n    input wire [7:0] secret_value,\n    input wire [7:0] input_value,\n    output reg match\n);\n    reg [7:0] temp_secret;\n    reg [7:0] temp_input;\n    reg delay_flag;\n\n    always @(*) begin\n        temp_secret = secret_value;\n        temp_input = input_value;\n        delay_flag = 1'b0;\n\n        if (temp_secret == temp_input) begin\n            match = 1'b1;\n        end else begin\n            match = 1'b0;\n            if (temp_secret[0] == 1'b1) begin\n                delay_flag = 1'b1; // Introduce delay if LSB of secret is 1\n            end\n        end\n\n        if (delay_flag) begin\n            #1; // Delay to create observable discrepancy\n        end\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-203_8_9.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-203", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-203\nmodule secure_comparator (\n    input wire [7:0] secret_data,\n    input wire [7:0] input_data,\n    output reg match\n);\n    reg [3:0] delay_counter;\n\n    always @(*) begin\n        if (secret_data == input_data) begin\n            delay_counter = 4'd10; // Introduce delay if data matches\n            match = 1'b1;\n        end else begin\n            delay_counter = 4'd0;\n            match = 1'b0;\n        end\n    end\n\n    always @(posedge match) begin\n        repeat(delay_counter) @(posedge match); // Simulate delay\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-203_8_10.v", "lint_pass": false, "judge": {"realism": false, "consistency": true}}
{"cwe_target": "CWE-1240", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1240\nmodule weak_rng(\n    input wire clk,\n    input wire rst,\n    input wire [31:0] seed,\n    output reg [31:0] random_number\n);\n\nreg [31:0] lfsr;\nreg [31:0] lfsr_next;\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        lfsr <= seed;\n    end else begin\n        lfsr <= lfsr_next;\n    end\nend\n\nalways @* begin\n    // Linear Feedback Shift Register (LFSR) with a simple tap configuration\n    lfsr_next = {lfsr[30:0], lfsr[31] ^ lfsr[28] ^ lfsr[25] ^ lfsr[24]};\n    random_number = lfsr_next; // Directly using LFSR output as random number\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1240_8_11.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1240", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1240\nmodule insecure_aes_encrypt(\n    input wire clk,\n    input wire rst,\n    input wire [127:0] plaintext,\n    input wire [127:0] key,\n    output reg [127:0] ciphertext\n);\n\n    reg [127:0] state;\n    reg [127:0] round_key;\n    integer i;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            state <= 128'd0;\n            ciphertext <= 128'd0;\n        end else begin\n            state <= plaintext ^ key; // Initial AddRoundKey\n\n            for (i = 0; i < 10; i = i + 1) begin\n                state <= substitute_bytes(state); // Substitute bytes\n                state <= shift_rows(state);       // Shift rows\n                if (i < 9) begin\n                    state <= mix_columns(state);  // Mix columns\n                end\n                round_key <= generate_round_key(key, i);\n                state <= state ^ round_key;       // AddRoundKey\n            end\n\n            ciphertext <= state;\n        end\n    end\n\n    function [127:0] substitute_bytes(input [127:0] in);\n        integer j;\n        reg [7:0] sbox [0:255];\n        begin\n            for (j = 0; j < 256; j = j + 1) begin\n                sbox[j] = j ^ 8'h63; // Simple XOR instead of proper S-box\n            end\n            for (j = 0; j < 16; j = j + 1) begin\n                substitute_bytes[(j*8)+:8] = sbox[in[(j*8)+:8]];\n            end\n        end\n    endfunction\n\n    function [127:0] shift_rows(input [127:0] in);\n        begin\n            shift_rows = {in[127:120], in[87:80], in[47:40], in[7:0],\n                          in[95:88], in[55:48], in[15:8], in[103:96],\n                          in[63:56], in[23:16], in[111:104], in[71:64],\n                          in[31:24], in[119:112], in[79:72], in[39:32]};\n        end\n    endfunction\n\n    function [127:0] mix_columns(input [127:0] in);\n        integer k;\n        reg [31:0] column;\n        reg [31:0] mixed_column;\n        begin\n            for (k = 0; k < 4; k = k + 1) begin\n                column = in[(k*32)+:32];\n                mixed_column = {column[23:16], column[15:8], column[7:0], column[31:24]};\n                mix_columns[(k*32)+:32] = mixed_column;\n            end\n        end\n    endfunction\n\n    function [127:0] generate_round_key(input [127:0] key, input integer round);\n        begin\n            generate_round_key = key ^ {round, round, round, round}; // Simplified key schedule\n        end\n    endfunction\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1240_8_12.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-440", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-440\nmodule data_processor (clk, rst, data_in, data_out);\n    input clk;\n    input rst;\n    input [15:0] data_in;\n    output reg [15:0] data_out;\n\n    reg [7:0] lookup_table [0:255];\n\n    initial begin\n        lookup_table[8'h00] = 8'h00; // Incorrect: should be 8'h63\n        lookup_table[8'h01] = 8'h01; // Incorrect: should be 8'h7c\n        lookup_table[8'h02] = 8'h77;\n        lookup_table[8'h03] = 8'h7b;\n        lookup_table[8'h04] = 8'hf2;\n        lookup_table[8'h05] = 8'h6b;\n        lookup_table[8'h06] = 8'h6f;\n        lookup_table[8'h07] = 8'hc5;\n        lookup_table[8'h08] = 8'h30;\n        lookup_table[8'h09] = 8'h01;\n        // ... (rest of the table)\n        lookup_table[8'hff] = 8'h16;\n    end\n\n    always @ (posedge clk or posedge rst) begin\n        if (rst)\n            data_out <= 16'd0;\n        else\n            data_out <= {lookup_table[data_in[15:8]], lookup_table[data_in[7:0]]};\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-440_8_13.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-440", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-440\nmodule expected_behavior_violation(clk, rst, data_in, data_out);\n    input clk;\n    input rst;\n    input [7:0] data_in;\n    output reg [7:0] data_out;\n\n    always @(posedge clk or posedge rst) begin\n        if (rst) begin\n            data_out <= 8'h00;\n        end else begin\n            case (data_in)\n                8'h00: data_out <= 8'hFF; // Incorrect: should be 8'h01\n                8'h01: data_out <= 8'h00; // Incorrect: should be 8'h02\n                8'h02: data_out <= 8'h02;\n                8'h03: data_out <= 8'h03;\n                8'h04: data_out <= 8'h04;\n                8'h05: data_out <= 8'h05;\n                8'h06: data_out <= 8'h06;\n                8'h07: data_out <= 8'h07;\n                8'h08: data_out <= 8'h08;\n                8'h09: data_out <= 8'h09;\n                8'h0A: data_out <= 8'h0A;\n                8'h0B: data_out <= 8'h0B;\n                8'h0C: data_out <= 8'h0C;\n                8'h0D: data_out <= 8'h0D;\n                8'h0E: data_out <= 8'h0E;\n                8'h0F: data_out <= 8'h0F;\n                default: data_out <= 8'hFF; // Fallback to an invalid value\n            endcase\n        end\n    end\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-440_8_14.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-319", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-319\nmodule password_transmitter(\n    input wire clk,\n    input wire reset_n,\n    input wire [7:0] password_in,\n    input wire send,\n    output reg [7:0] transmitted_data\n);\n\nreg [7:0] password_reg;\nreg send_reg;\n\nalways @(posedge clk or negedge reset_n) begin\n    if (!reset_n) begin\n        password_reg <= 8'b0;\n        send_reg <= 1'b0;\n    end else begin\n        if (send) begin\n            password_reg <= password_in;\n            send_reg <= 1'b1;\n        end else begin\n            send_reg <= 1'b0;\n        end\n    end\nend\n\nalways @(posedge clk) begin\n    if (send_reg) begin\n        transmitted_data <= password_reg; // Transmitting password in cleartext\n    end else begin\n        transmitted_data <= 8'b0;\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-319_8_15.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-319", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-319\nmodule password_transmitter(\n    input wire clk,\n    input wire reset_n,\n    input wire [127:0] password,\n    input wire send,\n    output reg [127:0] transmitted_data\n);\n\nreg [127:0] internal_password;\n\nalways @(posedge clk or negedge reset_n) begin\n    if (!reset_n) begin\n        internal_password <= 128'h0;\n    end else if (send) begin\n        internal_password <= password;\n    end\nend\n\nalways @(posedge clk) begin\n    if (send) begin\n        transmitted_data <= internal_password; // Transmitting sensitive data in cleartext\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-319_8_16.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-276", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-276\nmodule secure_storage(\n    input wire clk,\n    input wire reset_n,\n    input wire [7:0] address,\n    input wire [31:0] write_data,\n    input wire cs,\n    input wire we,\n    output wire [31:0] read_data\n);\n\nlocalparam ADDR_DATA = 8'h00;\nlocalparam ADDR_KEY  = 8'h01;\n\nreg [31:0] data_reg;\nreg [31:0] key_reg;\nreg [1:0] access_control = 2'b11; // Default allows read/write\n\nassign read_data = (cs && access_control[0]) ? (address == ADDR_DATA ? data_reg : key_reg) : 32'b0;\n\nalways @(posedge clk or negedge reset_n) begin\n    if (!reset_n) begin\n        data_reg <= 32'b0;\n        key_reg <= 32'b0;\n    end else if (cs && we && access_control[1]) begin\n        if (address == ADDR_DATA) begin\n            data_reg <= write_data;\n        end else if (address == ADDR_KEY) begin\n            key_reg <= write_data;\n        end\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-276_8_17.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-276", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-276\nmodule secure_storage(\n    input wire clk,\n    input wire rst_n,\n    input wire [7:0] address,\n    input wire [31:0] write_data,\n    input wire write_enable,\n    output wire [31:0] read_data\n);\n\nreg [31:0] storage [0:255];\nreg [31:0] read_data_reg;\nreg [1:0] access_control = 2'b11; // Default allows read/write\n\nassign read_data = read_data_reg;\n\nalways @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin\n        read_data_reg <= 32'b0;\n    end else begin\n        if (write_enable && access_control[1]) begin\n            storage[address] <= write_data;\n        end\n        if (access_control[0]) begin\n            read_data_reg <= storage[address];\n        end\n    end\nend\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-276_8_18.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-441", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-441\nmodule confused_deputy #(parameter DATA_WIDTH = 32, parameter ADDR_WIDTH = 8)\n(\n    input wire clk,\n    input wire reset_n,\n    input wire start,\n    output wire ready,\n    input wire [ADDR_WIDTH-1:0] addr,\n    input wire [DATA_WIDTH-1:0] data_in,\n    output wire [DATA_WIDTH-1:0] data_out,\n    input wire write_enable,\n    input wire read_enable\n);\n\n    reg [DATA_WIDTH-1:0] memory [0:(1<<ADDR_WIDTH)-1];\n    reg [DATA_WIDTH-1:0] internal_data;\n    reg ready_reg;\n    reg internal_write_enable;\n\n    assign ready = ready_reg;\n    assign data_out = memory[addr];\n\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            ready_reg <= 1'b0;\n            internal_write_enable <= 1'b0;\n        end else begin\n            if (start) begin\n                ready_reg <= 1'b0;\n                if (write_enable) begin\n                    memory[addr] <= data_in;\n                end\n                if (read_enable) begin\n                    internal_data <= memory[addr];\n                end\n                if (addr == 8'hFF) begin // Confused deputy condition\n                    internal_write_enable <= 1'b1;\n                end\n                if (internal_write_enable) begin\n                    memory[8'h00] <= internal_data; // Unintended write to address 0\n                end\n                ready_reg <= 1'b1;\n            end\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-441_8_19.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-441", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-441\nmodule unintended_proxy #(parameter DATA_WIDTH = 32, parameter ADDR_WIDTH = 8)\n(\n    input wire clk,\n    input wire reset_n,\n    input wire start,\n    output wire ready,\n\n    input wire [ADDR_WIDTH-1:0] address,\n    input wire [DATA_WIDTH-1:0] write_data,\n    input wire write_enable,\n    output wire [DATA_WIDTH-1:0] read_data,\n\n    input wire [DATA_WIDTH-1:0] proxy_data,\n    input wire proxy_enable\n);\n\n    reg [DATA_WIDTH-1:0] memory [0:(1<<ADDR_WIDTH)-1];\n    reg [DATA_WIDTH-1:0] read_data_reg;\n    reg ready_reg;\n\n    assign read_data = read_data_reg;\n    assign ready = ready_reg;\n\n    always @(posedge clk or negedge reset_n) begin\n        if (!reset_n) begin\n            ready_reg <= 1'b0;\n        end else begin\n            if (start) begin\n                ready_reg <= 1'b0;\n                if (write_enable) begin\n                    memory[address] <= write_data;\n                end\n                read_data_reg <= memory[address];\n                ready_reg <= 1'b1;\n            end\n        end\n    end\n\n    always @(posedge clk) begin\n        if (proxy_enable) begin\n            memory[address] <= proxy_data; // Unintended proxy write\n        end\n    end\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-441_8_20.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1191", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1191\nmodule insecure_debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire [31:0] data_in,\n    output wire [31:0] data_out,\n    input wire [3:0] control,\n    input wire debug_enable,\n    output wire [31:0] debug_data\n);\n\nreg [31:0] internal_reg;\nreg [31:0] debug_reg;\n\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        internal_reg <= 32'h0;\n        debug_reg <= 32'h0;\n    end else begin\n        case (control)\n            4'b0001: internal_reg <= data_in;\n            4'b0010: internal_reg <= internal_reg + data_in;\n            4'b0100: internal_reg <= internal_reg - data_in;\n            4'b1000: internal_reg <= internal_reg ^ data_in;\n            default: internal_reg <= internal_reg;\n        endcase\n        debug_reg <= internal_reg; // Debug register mirrors internal state\n    end\nend\n\nassign data_out = internal_reg;\nassign debug_data = debug_enable ? debug_reg : 32'h0;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1191_8_21.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1191", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1191\nmodule debug_interface(\n    input wire clk,\n    input wire rst,\n    input wire enable,\n    input wire [31:0] data_in,\n    output wire [31:0] data_out,\n    output wire [31:0] debug_data\n);\n\nreg [31:0] internal_reg;\nreg [31:0] debug_reg;\n\n// Internal logic\nalways @(posedge clk or posedge rst) begin\n    if (rst) begin\n        internal_reg <= 32'h0;\n        debug_reg <= 32'h0;\n    end else if (enable) begin\n        internal_reg <= data_in;\n        debug_reg <= internal_reg; // Improper access control\n    end\nend\n\nassign data_out = internal_reg;\nassign debug_data = debug_reg;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1191_8_22.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1262", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1262\nmodule sensitive_data_exposure(\n    input wire clk,\n    input wire rst,\n    input wire [31:0] data_in,\n    input wire write_enable,\n    output wire [31:0] data_out\n);\n\nreg [31:0] sensitive_reg;\n\nalways @(posedge clk) begin\n    if (rst) begin\n        sensitive_reg <= 32'h0;\n    end else if (write_enable) begin\n        sensitive_reg <= data_in; // Unprotected write to sensitive register\n    end\nend\n\nassign data_out = sensitive_reg; // Exposing sensitive data\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1262_8_23.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1262", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1262\nmodule secure_data_module (\n    input wire clk,\n    input wire rst,\n    input wire [31:0] data_in,\n    input wire write_enable,\n    output wire [31:0] data_out\n);\n\nreg [31:0] sensitive_data_reg;\n\nalways @(posedge clk) begin\n    if (rst) begin\n        sensitive_data_reg <= 32'h0;\n    end else if (write_enable) begin\n        sensitive_data_reg <= data_in; // Unprotected write\n    end\nend\n\nassign data_out = sensitive_data_reg;\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1262_8_24.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1244", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1244\nmodule secure_storage(clk, rst, write_enable, address, data_in, data_out, debug_access);\n    input wire clk;\n    input wire rst;\n    input wire write_enable;\n    input wire [7:0] address;\n    input wire [31:0] data_in;\n    output wire [31:0] data_out;\n    output wire [31:0] debug_access; // Debug access to internal data\n\n    reg [31:0] memory [255:0];\n    reg [31:0] internal_data;\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_data <= 32'b0;\n        end else if (write_enable) begin\n            memory[address] <= data_in;\n            internal_data <= data_in;\n        end\n    end\n\n    assign data_out = memory[address];\n    assign debug_access = internal_data; // Exposing internal data for debugging\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1244_8_25.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
{"cwe_target": "CWE-1244", "shots": 8, "model": "gpt4o", "raw": "```verilog\n// CWE: CWE-1244\nmodule secure_processor (clk, rst, execute, instruction, result, debug_register);\n    input wire          clk;\n    input wire          rst;\n    input wire          execute;\n    input wire [31:0]   instruction;\n    output wire [31:0]  result;\n    output wire [31:0]  debug_register; // Exposed internal register for debugging\n\n    reg    [31:0]  internal_register;\n    reg    [31:0]  accumulator;\n    reg            execute_r;\n    wire           execute_posedge;\n\n    assign execute_posedge = execute & ~execute_r;\n\n    always @(posedge clk) begin\n        if (rst)\n            execute_r <= 1'b0;\n        else\n            execute_r <= execute;\n    end\n\n    always @(posedge clk) begin\n        if (rst) begin\n            internal_register <= 32'd0;\n            accumulator <= 32'd0;\n        end else if (execute_posedge) begin\n            internal_register <= instruction;\n            accumulator <= accumulator + instruction;\n        end\n    end\n\n    assign result = accumulator;\n    assign debug_register = internal_register; // Unsafe exposure of internal state\n\nendmodule\n```", "code_path": "/Users/agastya/Library/Mobile Documents/com~apple~CloudDocs/Downloads/rtl_bug_detection/results/gen_gpt4o_s8/gpt4o_CWE-1244_8_26.v", "lint_pass": false, "judge": {"realism": true, "consistency": true}}
