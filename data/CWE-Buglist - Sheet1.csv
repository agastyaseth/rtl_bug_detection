Bug ID,Description,CWE-ID,Justification,Slide Link,GitHub Link,Comments
1,Observable Discrepancy,CWE-203,"Introduce a timing discrepancy that an unauthorized actor could observe, potentially enabling a timing attack to leak information about the input.

When msg_padded[0] is 1, the state machine transitions to EXTRA_DELAY, adding an extra clock cycle before proceeding to ROUND2. This creates a timing difference based on the input, making it vulnerable to timing attacks.",CWE-Buglist,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
2,Sensitive Information in Resource Not Removed Before Reuse,CWE-226,"Fail to clear sensitive data from registers before reuse, potentially exposing previous computation results.",CWE-Buglist,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5 ,
3,Missing Cryptographic Step,CWE-325,"Omit a critical step in the MD5 algorithm, reducing its cryptographic strength.",CWE-Buglist,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
4,Expected Behavior Violation,CWE-440,"Cause the implementation to deviate from the MD5 specification, producing incorrect hash outputs.",CWE-Buglist,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
5,Observable Discrepancy,CWE-203,"Add a data-dependent delay by introducing a conditional pipeline stage based on the input state’s least significant bit. If state_in[0] is 1, the output is delayed by an extra clock cycle, creating a timing discrepancy observable via side-channel analysis, potentially leaking information about the state.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
6,Sensitive Information in Resource Not Removed Before Reuse,CWE-226,"Remove the reset clearing of the key register k0. The key in k0 persists after reset, allowing potential access to the previous key value if the register is reused, violating confidentiality.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
7,Missing Cryptographic Step,CWE-325,"Replace the r10 instance of one_round with a new one_round_skip module that bypasses the round. Skipping round 10 reduces the AES-192 process from 12 to 11 effective rounds, significantly weakening encryption strength.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
8,Expected Behavior Violation,CWE-440,"Alter the S-box to output incorrect values for some inputs. The S-box deviates from the AES standard, producing incorrect substitutions that break encryption integrity.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
9,On-Chip Debug and Test Interface With Improper Access Control,CWE-1191,"Add an uncontrolled debug output for the key. The key is always exposed via debug_key, allowing unauthorized access without authentication, mimicking a vulnerable debug interface.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5 ,
10,Use of a Cryptographic Primitive with a Risky Implementation,CWE-1240,"Simplify the S-box to a linear function, reducing security. The S-box becomes a trivial operation, making AES encryption predictable and insecure.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
11,Internal Asset Exposed to Unsafe Debug Access Level or State,CWE-1244,"Expose the internal state s11 as an output. The pre-final-round state is exposed, allowing attackers to analyze intermediate cryptographic data.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
12,Sensitive Information Uncleared Before Debug/Power State Transition,CWE-1272,"Remove state clearing on reset. The output state persists across resets, potentially leaking previous encryption results.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
13,Improper Protection Against Hardware Reverse Engineering,CWE-1300,"Add explicit comments revealing key usage. Comments make it easier to identify key handling, assisting reverse engineering (demonstrative, not functional).",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
14,Observable Discrepancy,CWE-203,"The design exhibits observable differences (e.g., timing) based on input data, potentially leaking information. If the least significant bit of the input block is 1, the rounds terminate early, creating a timing discrepancy observable by an attacker. (Note: This breaks SHA-256 correctness, but demonstrates the weakness.)",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
15,On-Chip Debug and Test Interface with Improper Access Control,CWE-1191,"Debug interfaces expose sensitive data without proper authorization. If debug_enable is asserted (e.g., via an external pin or software), the internal state is exposed without authentication, allowing sensitive data leakage.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
16,Use of a Cryptographic Primitive with a Risky Implementation,CWE-1240,"The cryptographic algorithm is implemented incorrectly, compromising security. Incorrect hash values are produced, undermining the cryptographic integrity of SHA-256.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5 ,
17,Register Interface Allows Software Access to Sensitive Data,CWE-1262,"Sensitive registers are accessible or modifiable without control. External software can overwrite a_reg, manipulating the hash computation without authorization.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
18,Sensitive Information Uncleared Before Debug/Power State Transition,CWE-1272,"Sensitive data remains in registers during state transitions. During reset (e.g., power transition), a_reg to h_reg retain previous values, potentially leaking intermediate states.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
19,Observable Discrepancy,CWE-203,"Introduce a timing discrepancy based on the exponent bit to enable timing attacks. In the control FSM, add a delay when processing an exponent bit of 1, making execution time depend on the secret exponent.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
20,Sensitive Information in Resource Not Removed Before Reuse,CWE-226,"Ensure sensitive data (e.g., intermediate results) remains in memory after use. Expose the internal s_mem (which holds intermediate Montgomery product values) via the result output without clearing it.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
21,Incorrect Default Permissions,CWE-276,"Allow unauthorized writes to sensitive memory (e.g., exponent memory) by default. Remove write enable checks for exponent_mem, making it always writable.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
22,Cleartext Transmission of Sensitive Information,CWE-319,"Expose sensitive data (e.g., exponent) directly via an output port. Add an output port to leak the exponent memory content.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
23,Missing Cryptographic Step,CWE-325," Omit a critical step in the Montgomery multiplication, weakening the algorithm. Skip the addition of q*M in the Montgomery product calculation.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5 ,
24,Expected Behavior Violation,CWE-440,"Make a basic component (e.g., adder) produce incorrect results under specific conditions. Introduce an error in the adder for specific inputs (e.g., all ones).",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
25,Unintended Proxy or Intermediary ('Confused Deputy'),CWE-441,Allow one module to access another’s sensitive memory illicitly via shared resources. Let montprod write to exponent_mem under a specific condition.,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
26,Observable Discrepancy,CWE-203,"Introduce a timing side-channel where the time to assert encrypt depends on the P-code (p_pt), allowing an attacker to infer data by observing timing. Replace the encrypt signal logic with a state machine that delays encryption based on the lower 8 bits of p_pt.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
27,Sensitive Information in Resource Not Removed Before Reuse,CWE-226,"Prevent clearing of shift registers on reset, allowing previous state to persist and leak sensitive data (e.g., P-code state). Add an input keep_state and modify the reset logic for sreg to retain its value if keep_state is high.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
28,Incorrect Default Permissions,CWE-276," Expose the AES key with a default setting that allows unauthorized access, simulating permissive permissions. Add an access_control register and an output key_out, exposing the key if not restricted.  Add new_key and update_key inputs, updating the AES key in cleartext.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
29,Cleartext Transmission of Sensitive Information,CWE-319,"Allow the AES key to be updated via an input port, simulating cleartext transmission over a sniffable channel.  Add new_key and update_key inputs, updating the AES key in cleartext.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
30,Missing Cryptographic Step,CWE-325,Weaken AES encryption by reducing the number of rounds (assuming aes_192 is configurable). Parameterize aes_192 to use 10 rounds instead of 12 (AES-192 standard).,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5 ,
31,Expected Behavior Violation,CWE-440,"Alter P-code generation to produce an incorrect sequence, violating expected behavior. Change the feedback logic for the x1a shift register.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
32,Observable Discrepancy,CWE-203,"Introduces a timing discrepancy based on sensitive data (e.g., key bits), enabling side-channel attacks like timing analysis. Add a conditional delay based on a key bit.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
33,Sensitive Information in Resource Not Removed Before Reuse,CWE-226,"Fails to clear sensitive registers (e.g., intermediate results) upon reset, risking data leakage. Remove clearing of registers L, R, and FP_R on reset.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
34,Cleartext Transmission of Sensitive Information,CWE-319,"Exposes sensitive data (e.g., keys) in cleartext over an observable channel. Add output ports to expose key values.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
35,Missing Cryptographic Step,CWE-325,"Omits a critical step in DES (e.g., an S-box substitution), weakening encryption. Remove one S-box (e.g., sbox4) and fix its output.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
36,Expected Behavior Violation,CWE-440,"Alters the design to deviate from the DES specification (e.g., incorrect permutation). Modify the initial permutation (IP) to swap fewer bits.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
37,On-Chip Debug and Test Interface With Improper Access Control,CWE-1191,Adds an unprotected debug interface exposing internal states. Expose internal registers L and R as outputs.,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5 ,
38,Internal Asset Exposed to Unsafe Debug Access Level or State,CWE-1244,"Exposes sensitive internal assets via debug outputs (similar to CWE-1191 but focused on assets). Sensitive round data is exposed, risking leakage via debug access.",,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
39,Use of a Cryptographic Primitive with a Risky Implementation,CWE-1240,Weakens DES3 by using the same key for all three stages. Force K to always use key1.,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
40,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
41,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
42,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
43,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
44,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
45,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
46,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
47,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
48,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
49,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,
50,,,,,https://github.com/agastyaseth/cep-cwe-benchmark/tree/master/hdl_cores/md5,